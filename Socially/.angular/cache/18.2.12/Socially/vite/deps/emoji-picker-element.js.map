{
  "version": 3,
  "sources": ["../../../../../../node_modules/emoji-picker-element/database.js", "../../../../../../node_modules/emoji-picker-element/picker.js"],
  "sourcesContent": ["function assertNonEmptyString(str) {\n  if (typeof str !== 'string' || !str) {\n    throw new Error('expected a non-empty string, got: ' + str);\n  }\n}\nfunction assertNumber(number) {\n  if (typeof number !== 'number') {\n    throw new Error('expected a number, got: ' + number);\n  }\n}\nconst DB_VERSION_CURRENT = 1;\nconst DB_VERSION_INITIAL = 1;\nconst STORE_EMOJI = 'emoji';\nconst STORE_KEYVALUE = 'keyvalue';\nconst STORE_FAVORITES = 'favorites';\nconst FIELD_TOKENS = 'tokens';\nconst INDEX_TOKENS = 'tokens';\nconst FIELD_UNICODE = 'unicode';\nconst INDEX_COUNT = 'count';\nconst FIELD_GROUP = 'group';\nconst FIELD_ORDER = 'order';\nconst INDEX_GROUP_AND_ORDER = 'group-order';\nconst KEY_ETAG = 'eTag';\nconst KEY_URL = 'url';\nconst KEY_PREFERRED_SKINTONE = 'skinTone';\nconst MODE_READONLY = 'readonly';\nconst MODE_READWRITE = 'readwrite';\nconst INDEX_SKIN_UNICODE = 'skinUnicodes';\nconst FIELD_SKIN_UNICODE = 'skinUnicodes';\nconst DEFAULT_DATA_SOURCE = 'https://cdn.jsdelivr.net/npm/emoji-picker-element-data@^1/en/emojibase/data.json';\nconst DEFAULT_LOCALE = 'en';\n\n// like lodash's uniqBy but much smaller\nfunction uniqBy(arr, func) {\n  const set = new Set();\n  const res = [];\n  for (const item of arr) {\n    const key = func(item);\n    if (!set.has(key)) {\n      set.add(key);\n      res.push(item);\n    }\n  }\n  return res;\n}\nfunction uniqEmoji(emojis) {\n  return uniqBy(emojis, _ => _.unicode);\n}\nfunction initialMigration(db) {\n  function createObjectStore(name, keyPath, indexes) {\n    const store = keyPath ? db.createObjectStore(name, {\n      keyPath\n    }) : db.createObjectStore(name);\n    if (indexes) {\n      for (const [indexName, [keyPath, multiEntry]] of Object.entries(indexes)) {\n        store.createIndex(indexName, keyPath, {\n          multiEntry\n        });\n      }\n    }\n    return store;\n  }\n  createObjectStore(STORE_KEYVALUE);\n  createObjectStore(STORE_EMOJI, /* keyPath */FIELD_UNICODE, {\n    [INDEX_TOKENS]: [FIELD_TOKENS, /* multiEntry */true],\n    [INDEX_GROUP_AND_ORDER]: [[FIELD_GROUP, FIELD_ORDER]],\n    [INDEX_SKIN_UNICODE]: [FIELD_SKIN_UNICODE, /* multiEntry */true]\n  });\n  createObjectStore(STORE_FAVORITES, undefined, {\n    [INDEX_COUNT]: ['']\n  });\n}\nconst openIndexedDBRequests = {};\nconst databaseCache = {};\nconst onCloseListeners = {};\nfunction handleOpenOrDeleteReq(resolve, reject, req) {\n  // These things are almost impossible to test with fakeIndexedDB sadly\n  /* istanbul ignore next */\n  req.onerror = () => reject(req.error);\n  /* istanbul ignore next */\n  req.onblocked = () => reject(new Error('IDB blocked'));\n  req.onsuccess = () => resolve(req.result);\n}\nasync function createDatabase(dbName) {\n  const db = await new Promise((resolve, reject) => {\n    const req = indexedDB.open(dbName, DB_VERSION_CURRENT);\n    openIndexedDBRequests[dbName] = req;\n    req.onupgradeneeded = e => {\n      // Technically there is only one version, so we don't need this `if` check\n      // But if an old version of the JS is in another browser tab\n      // and it gets upgraded in the future and we have a new DB version, well...\n      // better safe than sorry.\n      /* istanbul ignore else */\n      if (e.oldVersion < DB_VERSION_INITIAL) {\n        initialMigration(req.result);\n      }\n    };\n    handleOpenOrDeleteReq(resolve, reject, req);\n  });\n  // Handle abnormal closes, e.g. \"delete database\" in chrome dev tools.\n  // No need for removeEventListener, because once the DB can no longer\n  // fire \"close\" events, it will auto-GC.\n  // Unfortunately cannot test in fakeIndexedDB: https://github.com/dumbmatter/fakeIndexedDB/issues/50\n  /* istanbul ignore next */\n  db.onclose = () => closeDatabase(dbName);\n  return db;\n}\nfunction openDatabase(dbName) {\n  if (!databaseCache[dbName]) {\n    databaseCache[dbName] = createDatabase(dbName);\n  }\n  return databaseCache[dbName];\n}\nfunction dbPromise(db, storeName, readOnlyOrReadWrite, cb) {\n  return new Promise((resolve, reject) => {\n    // Use relaxed durability because neither the emoji data nor the favorites/preferred skin tone\n    // are really irreplaceable data. IndexedDB is just a cache in this case.\n    const txn = db.transaction(storeName, readOnlyOrReadWrite, {\n      durability: 'relaxed'\n    });\n    const store = typeof storeName === 'string' ? txn.objectStore(storeName) : storeName.map(name => txn.objectStore(name));\n    let res;\n    cb(store, txn, result => {\n      res = result;\n    });\n    txn.oncomplete = () => resolve(res);\n    /* istanbul ignore next */\n    txn.onerror = () => reject(txn.error);\n  });\n}\nfunction closeDatabase(dbName) {\n  // close any open requests\n  const req = openIndexedDBRequests[dbName];\n  const db = req && req.result;\n  if (db) {\n    db.close();\n    const listeners = onCloseListeners[dbName];\n    /* istanbul ignore else */\n    if (listeners) {\n      for (const listener of listeners) {\n        listener();\n      }\n    }\n  }\n  delete openIndexedDBRequests[dbName];\n  delete databaseCache[dbName];\n  delete onCloseListeners[dbName];\n}\nfunction deleteDatabase(dbName) {\n  return new Promise((resolve, reject) => {\n    // close any open requests\n    closeDatabase(dbName);\n    const req = indexedDB.deleteDatabase(dbName);\n    handleOpenOrDeleteReq(resolve, reject, req);\n  });\n}\n\n// The \"close\" event occurs during an abnormal shutdown, e.g. a user clearing their browser data.\n// However, it doesn't occur with the normal \"close\" event, so we handle that separately.\n// https://www.w3.org/TR/IndexedDB/#close-a-database-connection\nfunction addOnCloseListener(dbName, listener) {\n  let listeners = onCloseListeners[dbName];\n  if (!listeners) {\n    listeners = onCloseListeners[dbName] = [];\n  }\n  listeners.push(listener);\n}\n\n// list of emoticons that don't match a simple \\W+ regex\n// extracted using:\n// require('emoji-picker-element-data/en/emojibase/data.json').map(_ => _.emoticon).filter(Boolean).filter(_ => !/^\\W+$/.test(_))\nconst irregularEmoticons = new Set([':D', 'XD', \":'D\", 'O:)', ':X', ':P', ';P', 'XP', ':L', ':Z', ':j', '8D', 'XO', '8)', ':B', ':O', ':S', \":'o\", 'Dx', 'X(', 'D:', ':C', '>0)', ':3', '</3', '<3', '\\\\M/', ':E', '8#']);\nfunction extractTokens(str) {\n  return str.split(/[\\s_]+/).map(word => {\n    if (!word.match(/\\w/) || irregularEmoticons.has(word)) {\n      // for pure emoticons like :) or :-), just leave them as-is\n      return word.toLowerCase();\n    }\n    return word.replace(/[)(:,]/g, '').replace(/’/g, \"'\").toLowerCase();\n  }).filter(Boolean);\n}\nconst MIN_SEARCH_TEXT_LENGTH = 2;\n\n// This is an extra step in addition to extractTokens(). The difference here is that we expect\n// the input to have already been run through extractTokens(). This is useful for cases like\n// emoticons, where we don't want to do any tokenization (because it makes no sense to split up\n// \">:)\" by the colon) but we do want to lowercase it to have consistent search results, so that\n// the user can type ':P' or ':p' and still get the same result.\nfunction normalizeTokens(str) {\n  return str.filter(Boolean).map(_ => _.toLowerCase()).filter(_ => _.length >= MIN_SEARCH_TEXT_LENGTH);\n}\n\n// Transform emoji data for storage in IDB\nfunction transformEmojiData(emojiData) {\n  const res = emojiData.map(({\n    annotation,\n    emoticon,\n    group,\n    order,\n    shortcodes,\n    skins,\n    tags,\n    emoji,\n    version\n  }) => {\n    const tokens = [...new Set(normalizeTokens([...(shortcodes || []).map(extractTokens).flat(), ...(tags || []).map(extractTokens).flat(), ...extractTokens(annotation), emoticon]))].sort();\n    const res = {\n      annotation,\n      group,\n      order,\n      tags,\n      tokens,\n      unicode: emoji,\n      version\n    };\n    if (emoticon) {\n      res.emoticon = emoticon;\n    }\n    if (shortcodes) {\n      res.shortcodes = shortcodes;\n    }\n    if (skins) {\n      res.skinTones = [];\n      res.skinUnicodes = [];\n      res.skinVersions = [];\n      for (const {\n        tone,\n        emoji,\n        version\n      } of skins) {\n        res.skinTones.push(tone);\n        res.skinUnicodes.push(emoji);\n        res.skinVersions.push(version);\n      }\n    }\n    return res;\n  });\n  return res;\n}\n\n// helper functions that help compress the code better\n\nfunction callStore(store, method, key, cb) {\n  store[method](key).onsuccess = e => cb && cb(e.target.result);\n}\nfunction getIDB(store, key, cb) {\n  callStore(store, 'get', key, cb);\n}\nfunction getAllIDB(store, key, cb) {\n  callStore(store, 'getAll', key, cb);\n}\nfunction commit(txn) {\n  /* istanbul ignore else */\n  if (txn.commit) {\n    txn.commit();\n  }\n}\n\n// like lodash's minBy\nfunction minBy(array, func) {\n  let minItem = array[0];\n  for (let i = 1; i < array.length; i++) {\n    const item = array[i];\n    if (func(minItem) > func(item)) {\n      minItem = item;\n    }\n  }\n  return minItem;\n}\n\n// return an array of results representing all items that are found in each one of the arrays\n//\n\nfunction findCommonMembers(arrays, uniqByFunc) {\n  const shortestArray = minBy(arrays, _ => _.length);\n  const results = [];\n  for (const item of shortestArray) {\n    // if this item is included in every array in the intermediate results, add it to the final results\n    if (!arrays.some(array => array.findIndex(_ => uniqByFunc(_) === uniqByFunc(item)) === -1)) {\n      results.push(item);\n    }\n  }\n  return results;\n}\nasync function isEmpty(db) {\n  return !(await get(db, STORE_KEYVALUE, KEY_URL));\n}\nasync function hasData(db, url, eTag) {\n  const [oldETag, oldUrl] = await Promise.all([KEY_ETAG, KEY_URL].map(key => get(db, STORE_KEYVALUE, key)));\n  return oldETag === eTag && oldUrl === url;\n}\nasync function doFullDatabaseScanForSingleResult(db, predicate) {\n  // This batching algorithm is just a perf improvement over a basic\n  // cursor. The BATCH_SIZE is an estimate of what would give the best\n  // perf for doing a full DB scan (worst case).\n  //\n  // Mini-benchmark for determining the best batch size:\n  //\n  // PERF=1 pnpm build:rollup && pnpm test:adhoc\n  //\n  // (async () => {\n  //   performance.mark('start')\n  //   await $('emoji-picker').database.getEmojiByShortcode('doesnotexist')\n  //   performance.measure('total', 'start')\n  //   console.log(performance.getEntriesByName('total').slice(-1)[0].duration)\n  // })()\n  const BATCH_SIZE = 50; // Typically around 150ms for 6x slowdown in Chrome for above benchmark\n  return dbPromise(db, STORE_EMOJI, MODE_READONLY, (emojiStore, txn, cb) => {\n    let lastKey;\n    const processNextBatch = () => {\n      emojiStore.getAll(lastKey && IDBKeyRange.lowerBound(lastKey, true), BATCH_SIZE).onsuccess = e => {\n        const results = e.target.result;\n        for (const result of results) {\n          lastKey = result.unicode;\n          if (predicate(result)) {\n            return cb(result);\n          }\n        }\n        if (results.length < BATCH_SIZE) {\n          return cb();\n        }\n        processNextBatch();\n      };\n    };\n    processNextBatch();\n  });\n}\nasync function loadData(db, emojiData, url, eTag) {\n  try {\n    const transformedData = transformEmojiData(emojiData);\n    await dbPromise(db, [STORE_EMOJI, STORE_KEYVALUE], MODE_READWRITE, ([emojiStore, metaStore], txn) => {\n      let oldETag;\n      let oldUrl;\n      let todo = 0;\n      function checkFetched() {\n        if (++todo === 2) {\n          // 2 requests made\n          onFetched();\n        }\n      }\n      function onFetched() {\n        if (oldETag === eTag && oldUrl === url) {\n          // check again within the transaction to guard against concurrency, e.g. multiple browser tabs\n          return;\n        }\n        // delete old data\n        emojiStore.clear();\n        // insert new data\n        for (const data of transformedData) {\n          emojiStore.put(data);\n        }\n        metaStore.put(eTag, KEY_ETAG);\n        metaStore.put(url, KEY_URL);\n        commit(txn);\n      }\n      getIDB(metaStore, KEY_ETAG, result => {\n        oldETag = result;\n        checkFetched();\n      });\n      getIDB(metaStore, KEY_URL, result => {\n        oldUrl = result;\n        checkFetched();\n      });\n    });\n  } finally {}\n}\nasync function getEmojiByGroup(db, group) {\n  return dbPromise(db, STORE_EMOJI, MODE_READONLY, (emojiStore, txn, cb) => {\n    const range = IDBKeyRange.bound([group, 0], [group + 1, 0], false, true);\n    getAllIDB(emojiStore.index(INDEX_GROUP_AND_ORDER), range, cb);\n  });\n}\nasync function getEmojiBySearchQuery(db, query) {\n  const tokens = normalizeTokens(extractTokens(query));\n  if (!tokens.length) {\n    return [];\n  }\n  return dbPromise(db, STORE_EMOJI, MODE_READONLY, (emojiStore, txn, cb) => {\n    // get all results that contain all tokens (i.e. an AND query)\n    const intermediateResults = [];\n    const checkDone = () => {\n      if (intermediateResults.length === tokens.length) {\n        onDone();\n      }\n    };\n    const onDone = () => {\n      const results = findCommonMembers(intermediateResults, _ => _.unicode);\n      cb(results.sort((a, b) => a.order < b.order ? -1 : 1));\n    };\n    for (let i = 0; i < tokens.length; i++) {\n      const token = tokens[i];\n      const range = i === tokens.length - 1 ? IDBKeyRange.bound(token, token + '\\uffff', false, true) // treat last token as a prefix search\n      : IDBKeyRange.only(token); // treat all other tokens as an exact match\n      getAllIDB(emojiStore.index(INDEX_TOKENS), range, result => {\n        intermediateResults.push(result);\n        checkDone();\n      });\n    }\n  });\n}\n\n// This could have been implemented as an IDB index on shortcodes, but it seemed wasteful to do that\n// when we can already query by tokens and this will give us what we're looking for 99.9% of the time\nasync function getEmojiByShortcode(db, shortcode) {\n  const emojis = await getEmojiBySearchQuery(db, shortcode);\n\n  // In very rare cases (e.g. the shortcode \"v\" as in \"v for victory\"), we cannot search because\n  // there are no usable tokens (too short in this case). In that case, we have to do an inefficient\n  // full-database scan, which I believe is an acceptable tradeoff for not having to have an extra\n  // index on shortcodes.\n\n  if (!emojis.length) {\n    const predicate = _ => (_.shortcodes || []).includes(shortcode.toLowerCase());\n    return (await doFullDatabaseScanForSingleResult(db, predicate)) || null;\n  }\n  return emojis.filter(_ => {\n    const lowerShortcodes = (_.shortcodes || []).map(_ => _.toLowerCase());\n    return lowerShortcodes.includes(shortcode.toLowerCase());\n  })[0] || null;\n}\nasync function getEmojiByUnicode(db, unicode) {\n  return dbPromise(db, STORE_EMOJI, MODE_READONLY, (emojiStore, txn, cb) => getIDB(emojiStore, unicode, result => {\n    if (result) {\n      return cb(result);\n    }\n    getIDB(emojiStore.index(INDEX_SKIN_UNICODE), unicode, result => cb(result || null));\n  }));\n}\nfunction get(db, storeName, key) {\n  return dbPromise(db, storeName, MODE_READONLY, (store, txn, cb) => getIDB(store, key, cb));\n}\nfunction set(db, storeName, key, value) {\n  return dbPromise(db, storeName, MODE_READWRITE, (store, txn) => {\n    store.put(value, key);\n    commit(txn);\n  });\n}\nfunction incrementFavoriteEmojiCount(db, unicode) {\n  return dbPromise(db, STORE_FAVORITES, MODE_READWRITE, (store, txn) => getIDB(store, unicode, result => {\n    store.put((result || 0) + 1, unicode);\n    commit(txn);\n  }));\n}\nfunction getTopFavoriteEmoji(db, customEmojiIndex, limit) {\n  if (limit === 0) {\n    return [];\n  }\n  return dbPromise(db, [STORE_FAVORITES, STORE_EMOJI], MODE_READONLY, ([favoritesStore, emojiStore], txn, cb) => {\n    const results = [];\n    favoritesStore.index(INDEX_COUNT).openCursor(undefined, 'prev').onsuccess = e => {\n      const cursor = e.target.result;\n      if (!cursor) {\n        // no more results\n        return cb(results);\n      }\n      function addResult(result) {\n        results.push(result);\n        if (results.length === limit) {\n          return cb(results); // done, reached the limit\n        }\n        cursor.continue();\n      }\n      const unicodeOrName = cursor.primaryKey;\n      const custom = customEmojiIndex.byName(unicodeOrName);\n      if (custom) {\n        return addResult(custom);\n      }\n      // This could be done in parallel (i.e. make the cursor and the get()s parallelized),\n      // but my testing suggests it's not actually faster.\n      getIDB(emojiStore, unicodeOrName, emoji => {\n        if (emoji) {\n          return addResult(emoji);\n        }\n        // emoji not found somehow, ignore (may happen if custom emoji change)\n        cursor.continue();\n      });\n    };\n  });\n}\n\n// trie data structure for prefix searches\n// loosely based on https://github.com/nolanlawson/substring-trie\n\nconst CODA_MARKER = ''; // marks the end of the string\n\nfunction trie(arr, itemToTokens) {\n  const map = new Map();\n  for (const item of arr) {\n    const tokens = itemToTokens(item);\n    for (const token of tokens) {\n      let currentMap = map;\n      for (let i = 0; i < token.length; i++) {\n        const char = token.charAt(i);\n        let nextMap = currentMap.get(char);\n        if (!nextMap) {\n          nextMap = new Map();\n          currentMap.set(char, nextMap);\n        }\n        currentMap = nextMap;\n      }\n      let valuesAtCoda = currentMap.get(CODA_MARKER);\n      if (!valuesAtCoda) {\n        valuesAtCoda = [];\n        currentMap.set(CODA_MARKER, valuesAtCoda);\n      }\n      valuesAtCoda.push(item);\n    }\n  }\n  const search = (query, exact) => {\n    let currentMap = map;\n    for (let i = 0; i < query.length; i++) {\n      const char = query.charAt(i);\n      const nextMap = currentMap.get(char);\n      if (nextMap) {\n        currentMap = nextMap;\n      } else {\n        return [];\n      }\n    }\n    if (exact) {\n      const results = currentMap.get(CODA_MARKER);\n      return results || [];\n    }\n    const results = [];\n    // traverse\n    const queue = [currentMap];\n    while (queue.length) {\n      const currentMap = queue.shift();\n      const entriesSortedByKey = [...currentMap.entries()].sort((a, b) => a[0] < b[0] ? -1 : 1);\n      for (const [key, value] of entriesSortedByKey) {\n        if (key === CODA_MARKER) {\n          // CODA_MARKER always comes first; it's the empty string\n          results.push(...value);\n        } else {\n          queue.push(value);\n        }\n      }\n    }\n    return results;\n  };\n  return search;\n}\nconst requiredKeys$1 = ['name', 'url'];\nfunction assertCustomEmojis(customEmojis) {\n  const isArray = customEmojis && Array.isArray(customEmojis);\n  const firstItemIsFaulty = isArray && customEmojis.length && (!customEmojis[0] || requiredKeys$1.some(key => !(key in customEmojis[0])));\n  if (!isArray || firstItemIsFaulty) {\n    throw new Error('Custom emojis are in the wrong format');\n  }\n}\nfunction customEmojiIndex(customEmojis) {\n  assertCustomEmojis(customEmojis);\n  const sortByName = (a, b) => a.name.toLowerCase() < b.name.toLowerCase() ? -1 : 1;\n\n  //\n  // all()\n  //\n  const all = customEmojis.sort(sortByName);\n\n  //\n  // search()\n  //\n  const emojiToTokens = emoji => {\n    const set = new Set();\n    if (emoji.shortcodes) {\n      for (const shortcode of emoji.shortcodes) {\n        for (const token of extractTokens(shortcode)) {\n          set.add(token);\n        }\n      }\n    }\n    return set;\n  };\n  const searchTrie = trie(customEmojis, emojiToTokens);\n  const searchByExactMatch = _ => searchTrie(_, true);\n  const searchByPrefix = _ => searchTrie(_, false);\n\n  // Search by query for custom emoji. Similar to how we do this in IDB, the last token\n  // is treated as a prefix search, but every other one is treated as an exact match.\n  // Then we AND the results together\n  const search = query => {\n    const tokens = extractTokens(query);\n    const intermediateResults = tokens.map((token, i) => (i < tokens.length - 1 ? searchByExactMatch : searchByPrefix)(token));\n    return findCommonMembers(intermediateResults, _ => _.name).sort(sortByName);\n  };\n\n  //\n  // byShortcode, byName\n  //\n  const shortcodeToEmoji = new Map();\n  const nameToEmoji = new Map();\n  for (const customEmoji of customEmojis) {\n    nameToEmoji.set(customEmoji.name.toLowerCase(), customEmoji);\n    for (const shortcode of customEmoji.shortcodes || []) {\n      shortcodeToEmoji.set(shortcode.toLowerCase(), customEmoji);\n    }\n  }\n  const byShortcode = shortcode => shortcodeToEmoji.get(shortcode.toLowerCase());\n  const byName = name => nameToEmoji.get(name.toLowerCase());\n  return {\n    all,\n    search,\n    byShortcode,\n    byName\n  };\n}\nconst isFirefoxContentScript = typeof wrappedJSObject !== 'undefined';\n\n// remove some internal implementation details, i.e. the \"tokens\" array on the emoji object\n// essentially, convert the emoji from the version stored in IDB to the version used in-memory\nfunction cleanEmoji(emoji) {\n  if (!emoji) {\n    return emoji;\n  }\n  // if inside a Firefox content script, need to clone the emoji object to prevent Firefox from complaining about\n  // cross-origin object. See: https://github.com/nolanlawson/emoji-picker-element/issues/356\n  /* istanbul ignore if */\n  if (isFirefoxContentScript) {\n    emoji = structuredClone(emoji);\n  }\n  delete emoji.tokens;\n  if (emoji.skinTones) {\n    const len = emoji.skinTones.length;\n    emoji.skins = Array(len);\n    for (let i = 0; i < len; i++) {\n      emoji.skins[i] = {\n        tone: emoji.skinTones[i],\n        unicode: emoji.skinUnicodes[i],\n        version: emoji.skinVersions[i]\n      };\n    }\n    delete emoji.skinTones;\n    delete emoji.skinUnicodes;\n    delete emoji.skinVersions;\n  }\n  return emoji;\n}\nfunction warnETag(eTag) {\n  if (!eTag) {\n    console.warn('emoji-picker-element is more efficient if the dataSource server exposes an ETag header.');\n  }\n}\nconst requiredKeys = ['annotation', 'emoji', 'group', 'order', 'version'];\nfunction assertEmojiData(emojiData) {\n  if (!emojiData || !Array.isArray(emojiData) || !emojiData[0] || typeof emojiData[0] !== 'object' || requiredKeys.some(key => !(key in emojiData[0]))) {\n    throw new Error('Emoji data is in the wrong format');\n  }\n}\nfunction assertStatus(response, dataSource) {\n  if (Math.floor(response.status / 100) !== 2) {\n    throw new Error('Failed to fetch: ' + dataSource + ':  ' + response.status);\n  }\n}\nasync function getETag(dataSource) {\n  const response = await fetch(dataSource, {\n    method: 'HEAD'\n  });\n  assertStatus(response, dataSource);\n  const eTag = response.headers.get('etag');\n  warnETag(eTag);\n  return eTag;\n}\nasync function getETagAndData(dataSource) {\n  const response = await fetch(dataSource);\n  assertStatus(response, dataSource);\n  const eTag = response.headers.get('etag');\n  warnETag(eTag);\n  const emojiData = await response.json();\n  assertEmojiData(emojiData);\n  return [eTag, emojiData];\n}\n\n// TODO: including these in blob-util.ts causes typedoc to generate docs for them,\n// even with --excludePrivate ¯\\_(ツ)_/¯\n/** @private */\n/**\n * Convert an `ArrayBuffer` to a binary string.\n *\n * Example:\n *\n * ```js\n * var myString = blobUtil.arrayBufferToBinaryString(arrayBuff)\n * ```\n *\n * @param buffer - array buffer\n * @returns binary string\n */\nfunction arrayBufferToBinaryString(buffer) {\n  var binary = '';\n  var bytes = new Uint8Array(buffer);\n  var length = bytes.byteLength;\n  var i = -1;\n  while (++i < length) {\n    binary += String.fromCharCode(bytes[i]);\n  }\n  return binary;\n}\n/**\n * Convert a binary string to an `ArrayBuffer`.\n *\n * ```js\n * var myBuffer = blobUtil.binaryStringToArrayBuffer(binaryString)\n * ```\n *\n * @param binary - binary string\n * @returns array buffer\n */\nfunction binaryStringToArrayBuffer(binary) {\n  var length = binary.length;\n  var buf = new ArrayBuffer(length);\n  var arr = new Uint8Array(buf);\n  var i = -1;\n  while (++i < length) {\n    arr[i] = binary.charCodeAt(i);\n  }\n  return buf;\n}\n\n// generate a checksum based on the stringified JSON\nasync function jsonChecksum(object) {\n  const inString = JSON.stringify(object);\n  let inBuffer = binaryStringToArrayBuffer(inString);\n\n  // this does not need to be cryptographically secure, SHA-1 is fine\n  const outBuffer = await crypto.subtle.digest('SHA-1', inBuffer);\n  const outBinString = arrayBufferToBinaryString(outBuffer);\n  const res = btoa(outBinString);\n  return res;\n}\nasync function checkForUpdates(db, dataSource) {\n  // just do a simple HEAD request first to see if the eTags match\n  let emojiData;\n  let eTag = await getETag(dataSource);\n  if (!eTag) {\n    // work around lack of ETag/Access-Control-Expose-Headers\n    const eTagAndData = await getETagAndData(dataSource);\n    eTag = eTagAndData[0];\n    emojiData = eTagAndData[1];\n    if (!eTag) {\n      eTag = await jsonChecksum(emojiData);\n    }\n  }\n  if (await hasData(db, dataSource, eTag)) ;else {\n    if (!emojiData) {\n      const eTagAndData = await getETagAndData(dataSource);\n      emojiData = eTagAndData[1];\n    }\n    await loadData(db, emojiData, dataSource, eTag);\n  }\n}\nasync function loadDataForFirstTime(db, dataSource) {\n  let [eTag, emojiData] = await getETagAndData(dataSource);\n  if (!eTag) {\n    // Handle lack of support for ETag or Access-Control-Expose-Headers\n    // https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Access-Control-Expose-Headers#Browser_compatibility\n    eTag = await jsonChecksum(emojiData);\n  }\n  await loadData(db, emojiData, dataSource, eTag);\n}\nclass Database {\n  constructor({\n    dataSource = DEFAULT_DATA_SOURCE,\n    locale = DEFAULT_LOCALE,\n    customEmoji = []\n  } = {}) {\n    this.dataSource = dataSource;\n    this.locale = locale;\n    this._dbName = `emoji-picker-element-${this.locale}`;\n    this._db = undefined;\n    this._lazyUpdate = undefined;\n    this._custom = customEmojiIndex(customEmoji);\n    this._clear = this._clear.bind(this);\n    this._ready = this._init();\n  }\n  async _init() {\n    const db = this._db = await openDatabase(this._dbName);\n    addOnCloseListener(this._dbName, this._clear);\n    const dataSource = this.dataSource;\n    const empty = await isEmpty(db);\n    if (empty) {\n      await loadDataForFirstTime(db, dataSource);\n    } else {\n      // offline-first - do an update asynchronously\n      this._lazyUpdate = checkForUpdates(db, dataSource);\n    }\n  }\n  async ready() {\n    const checkReady = async () => {\n      if (!this._ready) {\n        this._ready = this._init();\n      }\n      return this._ready;\n    };\n    await checkReady();\n    // There's a possibility of a race condition where the element gets added, removed, and then added again\n    // with a particular timing, which would set the _db to undefined.\n    // We *could* do a while loop here, but that seems excessive and could lead to an infinite loop.\n    if (!this._db) {\n      await checkReady();\n    }\n  }\n  async getEmojiByGroup(group) {\n    assertNumber(group);\n    await this.ready();\n    return uniqEmoji(await getEmojiByGroup(this._db, group)).map(cleanEmoji);\n  }\n  async getEmojiBySearchQuery(query) {\n    assertNonEmptyString(query);\n    await this.ready();\n    const customs = this._custom.search(query);\n    const natives = uniqEmoji(await getEmojiBySearchQuery(this._db, query)).map(cleanEmoji);\n    return [...customs, ...natives];\n  }\n  async getEmojiByShortcode(shortcode) {\n    assertNonEmptyString(shortcode);\n    await this.ready();\n    const custom = this._custom.byShortcode(shortcode);\n    if (custom) {\n      return custom;\n    }\n    return cleanEmoji(await getEmojiByShortcode(this._db, shortcode));\n  }\n  async getEmojiByUnicodeOrName(unicodeOrName) {\n    assertNonEmptyString(unicodeOrName);\n    await this.ready();\n    const custom = this._custom.byName(unicodeOrName);\n    if (custom) {\n      return custom;\n    }\n    return cleanEmoji(await getEmojiByUnicode(this._db, unicodeOrName));\n  }\n  async getPreferredSkinTone() {\n    await this.ready();\n    return (await get(this._db, STORE_KEYVALUE, KEY_PREFERRED_SKINTONE)) || 0;\n  }\n  async setPreferredSkinTone(skinTone) {\n    assertNumber(skinTone);\n    await this.ready();\n    return set(this._db, STORE_KEYVALUE, KEY_PREFERRED_SKINTONE, skinTone);\n  }\n  async incrementFavoriteEmojiCount(unicodeOrName) {\n    assertNonEmptyString(unicodeOrName);\n    await this.ready();\n    return incrementFavoriteEmojiCount(this._db, unicodeOrName);\n  }\n  async getTopFavoriteEmoji(limit) {\n    assertNumber(limit);\n    await this.ready();\n    return (await getTopFavoriteEmoji(this._db, this._custom, limit)).map(cleanEmoji);\n  }\n  set customEmoji(customEmojis) {\n    this._custom = customEmojiIndex(customEmojis);\n  }\n  get customEmoji() {\n    return this._custom.all;\n  }\n  async _shutdown() {\n    await this.ready(); // reopen if we've already been closed/deleted\n    try {\n      await this._lazyUpdate; // allow any lazy updates to process before closing/deleting\n    } catch (err) {/* ignore network errors (offline-first) */}\n  }\n\n  // clear references to IDB, e.g. during a close event\n  _clear() {\n    // We don't need to call removeEventListener or remove the manual \"close\" listeners.\n    // The memory leak tests prove this is unnecessary. It's because:\n    // 1) IDBDatabases that can no longer fire \"close\" automatically have listeners GCed\n    // 2) we clear the manual close listeners in databaseLifecycle.js.\n    this._db = this._ready = this._lazyUpdate = undefined;\n  }\n  async close() {\n    await this._shutdown();\n    await closeDatabase(this._dbName);\n  }\n  async delete() {\n    await this._shutdown();\n    await deleteDatabase(this._dbName);\n  }\n}\nexport { Database as default };", "import Database from './database.js';\n\n// via https://unpkg.com/browse/emojibase-data@6.0.0/meta/groups.json\nconst allGroups = [[-1, '✨', 'custom'], [0, '😀', 'smileys-emotion'], [1, '👋', 'people-body'], [3, '🐱', 'animals-nature'], [4, '🍎', 'food-drink'], [5, '🏠️', 'travel-places'], [6, '⚽', 'activities'], [7, '📝', 'objects'], [8, '⛔️', 'symbols'], [9, '🏁', 'flags']].map(([id, emoji, name]) => ({\n  id,\n  emoji,\n  name\n}));\nconst groups = allGroups.slice(1);\nconst MIN_SEARCH_TEXT_LENGTH = 2;\nconst NUM_SKIN_TONES = 6;\n\n/* istanbul ignore next */\nconst rIC = typeof requestIdleCallback === 'function' ? requestIdleCallback : setTimeout;\n\n// check for ZWJ (zero width joiner) character\nfunction hasZwj(emoji) {\n  return emoji.unicode.includes('\\u200d');\n}\n\n// Find one good representative emoji from each version to test by checking its color.\n// Ideally it should have color in the center. For some inspiration, see:\n// https://about.gitlab.com/blog/2018/05/30/journey-in-native-unicode-emoji/\n//\n// Note that for certain versions (12.1, 13.1), there is no point in testing them explicitly, because\n// all the emoji from this version are compound-emoji from previous versions. So they would pass a color\n// test, even in browsers that display them as double emoji. (E.g. \"face in clouds\" might render as\n// \"face without mouth\" plus \"fog\".) These emoji can only be filtered using the width test,\n// which happens in checkZwjSupport.js.\nconst versionsAndTestEmoji = {\n  '🫩': 16,\n  // face with bags under eyes\n  '🫨': 15.1,\n  // shaking head, technically from v15 but see note above\n  '🫠': 14,\n  '🥲': 13.1,\n  // smiling face with tear, technically from v13 but see note above\n  '🥻': 12.1,\n  // sari, technically from v12 but see note above\n  '🥰': 11,\n  '🤩': 5,\n  '👱‍♀️': 4,\n  '🤣': 3,\n  '👁️‍🗨️': 2,\n  '😀': 1,\n  '😐️': 0.7,\n  '😃': 0.6\n};\nconst TIMEOUT_BEFORE_LOADING_MESSAGE = 1000; // 1 second\nconst DEFAULT_SKIN_TONE_EMOJI = '🖐️';\nconst DEFAULT_NUM_COLUMNS = 8;\n\n// Based on https://fivethirtyeight.com/features/the-100-most-used-emojis/ and\n// https://blog.emojipedia.org/facebook-reveals-most-and-least-used-emojis/ with\n// a bit of my own curation. (E.g. avoid the \"OK\" gesture because of connotations:\n// https://emojipedia.org/ok-hand/)\nconst MOST_COMMONLY_USED_EMOJI = ['😊', '😒', '❤️', '👍️', '😍', '😂', '😭', '☺️', '😔', '😩', '😏', '💕', '🙌', '😘'];\n\n// It's important to list Twemoji Mozilla before everything else, because Mozilla bundles their\n// own font on some platforms (notably Windows and Linux as of this writing). Typically, Mozilla\n// updates faster than the underlying OS, and we don't want to render older emoji in one font and\n// newer emoji in another font:\n// https://github.com/nolanlawson/emoji-picker-element/pull/268#issuecomment-1073347283\nconst FONT_FAMILY = '\"Twemoji Mozilla\",\"Apple Color Emoji\",\"Segoe UI Emoji\",\"Segoe UI Symbol\",' + '\"Noto Color Emoji\",\"EmojiOne Color\",\"Android Emoji\",sans-serif';\n\n/* istanbul ignore next */\nconst DEFAULT_CATEGORY_SORTING = (a, b) => a < b ? -1 : a > b ? 1 : 0;\n\n// Test if an emoji is supported by rendering it to canvas and checking that the color is not black\n// See https://about.gitlab.com/blog/2018/05/30/journey-in-native-unicode-emoji/\n// and https://www.npmjs.com/package/if-emoji for inspiration\n// This implementation is largely borrowed from if-emoji, adding the font-family\n\nconst getTextFeature = (text, color) => {\n  const canvas = document.createElement('canvas');\n  canvas.width = canvas.height = 1;\n  const ctx = canvas.getContext('2d', {\n    // Improves the performance of `getImageData()`\n    // https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/getContextAttributes#willreadfrequently\n    willReadFrequently: true\n  });\n  ctx.textBaseline = 'top';\n  ctx.font = `100px ${FONT_FAMILY}`;\n  ctx.fillStyle = color;\n  ctx.scale(0.01, 0.01);\n  ctx.fillText(text, 0, 0);\n  return ctx.getImageData(0, 0, 1, 1).data;\n};\nconst compareFeatures = (feature1, feature2) => {\n  const feature1Str = [...feature1].join(',');\n  const feature2Str = [...feature2].join(',');\n  // This is RGBA, so for 0,0,0, we are checking that the first RGB is not all zeroes.\n  // Most of the time when unsupported this is 0,0,0,0, but on Chrome on Mac it is\n  // 0,0,0,61 - there is a transparency here.\n  return feature1Str === feature2Str && !feature1Str.startsWith('0,0,0,');\n};\nfunction testColorEmojiSupported(text) {\n  // Render white and black and then compare them to each other and ensure they're the same\n  // color, and neither one is black. This shows that the emoji was rendered in color.\n  const feature1 = getTextFeature(text, '#000');\n  const feature2 = getTextFeature(text, '#fff');\n  return feature1 && feature2 && compareFeatures(feature1, feature2);\n}\n\n// rather than check every emoji ever, which would be expensive, just check some representatives from the\n// different emoji releases to determine what the font supports\n\nfunction determineEmojiSupportLevel() {\n  const entries = Object.entries(versionsAndTestEmoji);\n  try {\n    // start with latest emoji and work backwards\n    for (const [emoji, version] of entries) {\n      if (testColorEmojiSupported(emoji)) {\n        return version;\n      }\n    }\n  } catch (e) {// canvas error\n  } finally {}\n  // In case of an error, be generous and just assume all emoji are supported (e.g. for canvas errors\n  // due to anti-fingerprinting add-ons). Better to show some gray boxes than nothing at all.\n  return entries[0][1]; // first one in the list is the most recent version\n}\n\n// Check which emojis we know for sure aren't supported, based on Unicode version level\nlet promise;\nconst detectEmojiSupportLevel = () => {\n  if (!promise) {\n    // Delay so it can run while the IDB database is being created by the browser (on another thread).\n    // This helps especially with first load – we want to start pre-populating the database on the main thread,\n    // and then wait for IDB to commit everything, and while waiting we run this check.\n    promise = new Promise(resolve => rIC(() => resolve(determineEmojiSupportLevel()) // delay so ideally this can run while IDB is first populating\n    ));\n  }\n  return promise;\n};\n// determine which emojis containing ZWJ (zero width joiner) characters\n// are supported (rendered as one glyph) rather than unsupported (rendered as two or more glyphs)\nconst supportedZwjEmojis = new Map();\nconst VARIATION_SELECTOR = '\\ufe0f';\nconst SKINTONE_MODIFIER = '\\ud83c';\nconst ZWJ = '\\u200d';\nconst LIGHT_SKIN_TONE = 0x1F3FB;\nconst LIGHT_SKIN_TONE_MODIFIER = 0xdffb;\n\n// TODO: this is a naive implementation, we can improve it later\n// It's only used for the skintone picker, so as long as people don't customize with\n// really exotic emoji then it should work fine\nfunction applySkinTone(str, skinTone) {\n  if (skinTone === 0) {\n    return str;\n  }\n  const zwjIndex = str.indexOf(ZWJ);\n  if (zwjIndex !== -1) {\n    return str.substring(0, zwjIndex) + String.fromCodePoint(LIGHT_SKIN_TONE + skinTone - 1) + str.substring(zwjIndex);\n  }\n  if (str.endsWith(VARIATION_SELECTOR)) {\n    str = str.substring(0, str.length - 1);\n  }\n  return str + SKINTONE_MODIFIER + String.fromCodePoint(LIGHT_SKIN_TONE_MODIFIER + skinTone - 1);\n}\nfunction halt(event) {\n  event.preventDefault();\n  event.stopPropagation();\n}\n\n// Implementation left/right or up/down navigation, circling back when you\n// reach the start/end of the list\nfunction incrementOrDecrement(decrement, val, arr) {\n  val += decrement ? -1 : 1;\n  if (val < 0) {\n    val = arr.length - 1;\n  } else if (val >= arr.length) {\n    val = 0;\n  }\n  return val;\n}\n\n// like lodash's uniqBy but much smaller\nfunction uniqBy(arr, func) {\n  const set = new Set();\n  const res = [];\n  for (const item of arr) {\n    const key = func(item);\n    if (!set.has(key)) {\n      set.add(key);\n      res.push(item);\n    }\n  }\n  return res;\n}\n\n// We don't need all the data on every emoji, and there are specific things we need\n// for the UI, so build a \"view model\" from the emoji object we got from the database\n\nfunction summarizeEmojisForUI(emojis, emojiSupportLevel) {\n  const toSimpleSkinsMap = skins => {\n    const res = {};\n    for (const skin of skins) {\n      // ignore arrays like [1, 2] with multiple skin tones\n      // also ignore variants that are in an unsupported emoji version\n      // (these do exist - variants from a different version than their base emoji)\n      if (typeof skin.tone === 'number' && skin.version <= emojiSupportLevel) {\n        res[skin.tone] = skin.unicode;\n      }\n    }\n    return res;\n  };\n  return emojis.map(({\n    unicode,\n    skins,\n    shortcodes,\n    url,\n    name,\n    category,\n    annotation\n  }) => ({\n    unicode,\n    name,\n    shortcodes,\n    url,\n    category,\n    annotation,\n    id: unicode || name,\n    skins: skins && toSimpleSkinsMap(skins)\n  }));\n}\n\n// import rAF from one place so that the bundle size is a bit smaller\nconst rAF = requestAnimationFrame;\n\n// \"Svelte action\"-like utility to detect layout changes via ResizeObserver.\n// If ResizeObserver is unsupported, we just use rAF once and don't bother to update.\n\nlet resizeObserverSupported = typeof ResizeObserver === 'function';\nfunction resizeObserverAction(node, abortSignal, onUpdate) {\n  let resizeObserver;\n  if (resizeObserverSupported) {\n    resizeObserver = new ResizeObserver(onUpdate);\n    resizeObserver.observe(node);\n  } else {\n    // just run once, don't bother trying to track it\n    rAF(onUpdate);\n  }\n\n  // cleanup function (called on destroy)\n  abortSignal.addEventListener('abort', () => {\n    if (resizeObserver) {\n      resizeObserver.disconnect();\n    }\n  });\n}\n\n// get the width of the text inside of a DOM node, via https://stackoverflow.com/a/59525891/680742\nfunction calculateTextWidth(node) {\n  // skip running this in jest/vitest because we don't need to check for emoji support in that environment\n  /* istanbul ignore else */\n  {\n    const range = document.createRange();\n    range.selectNode(node.firstChild);\n    return range.getBoundingClientRect().width;\n  }\n}\nlet baselineEmojiWidth;\n\n/**\n * Check if the given emojis containing ZWJ characters are supported by the current browser (don't render\n * as double characters) and return true if all are supported.\n * @param zwjEmojisToCheck\n * @param baselineEmoji\n * @param emojiToDomNode\n */\nfunction checkZwjSupport(zwjEmojisToCheck, baselineEmoji, emojiToDomNode) {\n  let allSupported = true;\n  for (const emoji of zwjEmojisToCheck) {\n    const domNode = emojiToDomNode(emoji);\n    const emojiWidth = calculateTextWidth(domNode);\n    if (typeof baselineEmojiWidth === 'undefined') {\n      // calculate the baseline emoji width only once\n      baselineEmojiWidth = calculateTextWidth(baselineEmoji);\n    }\n    // On Windows, some supported emoji are ~50% bigger than the baseline emoji, but what we really want to guard\n    // against are the ones that are 2x the size, because those are truly broken (person with red hair = person with\n    // floating red wig, black cat = cat with black square, polar bear = bear with snowflake, etc.)\n    // So here we set the threshold at 1.8 times the size of the baseline emoji.\n    const supported = emojiWidth / 1.8 < baselineEmojiWidth;\n    supportedZwjEmojis.set(emoji.unicode, supported);\n    if (!supported) {\n      allSupported = false;\n    }\n  }\n  return allSupported;\n}\n\n// like lodash's uniq\n\nfunction uniq(arr) {\n  return uniqBy(arr, _ => _);\n}\n\n// Note we put this in its own function outside Picker.js to avoid Svelte doing an invalidation on the \"setter\" here.\n// At best the invalidation is useless, at worst it can cause infinite loops:\n// https://github.com/nolanlawson/emoji-picker-element/pull/180\n// https://github.com/sveltejs/svelte/issues/6521\n// Also note tabpanelElement can be null if the element is disconnected immediately after connected\nfunction resetScrollTopIfPossible(element) {\n  /* istanbul ignore else */\n  if (element) {\n    // Makes me nervous not to have this `if` guard\n    element.scrollTop = 0;\n  }\n}\nfunction getFromMap(cache, key, func) {\n  let cached = cache.get(key);\n  if (!cached) {\n    cached = func();\n    cache.set(key, cached);\n  }\n  return cached;\n}\nfunction toString(value) {\n  return '' + value;\n}\nfunction parseTemplate(htmlString) {\n  const template = document.createElement('template');\n  template.innerHTML = htmlString;\n  return template;\n}\nconst parseCache = new WeakMap();\nconst domInstancesCache = new WeakMap();\n// This needs to be a symbol because it needs to be different from any possible output of a key function\nconst unkeyedSymbol = Symbol('un-keyed');\n\n// Not supported in Safari <=13\nconst hasReplaceChildren = 'replaceChildren' in Element.prototype;\nfunction replaceChildren(parentNode, newChildren) {\n  /* istanbul ignore else */\n  if (hasReplaceChildren) {\n    parentNode.replaceChildren(...newChildren);\n  } else {\n    // minimal polyfill for Element.prototype.replaceChildren\n    parentNode.innerHTML = '';\n    parentNode.append(...newChildren);\n  }\n}\nfunction doChildrenNeedRerender(parentNode, newChildren) {\n  let oldChild = parentNode.firstChild;\n  let oldChildrenCount = 0;\n  // iterate using firstChild/nextSibling because browsers use a linked list under the hood\n  while (oldChild) {\n    const newChild = newChildren[oldChildrenCount];\n    // check if the old child and new child are the same\n    if (newChild !== oldChild) {\n      return true;\n    }\n    oldChild = oldChild.nextSibling;\n    oldChildrenCount++;\n  }\n  // if new children length is different from old, we must re-render\n  return oldChildrenCount !== newChildren.length;\n}\nfunction patchChildren(newChildren, instanceBinding) {\n  const {\n    targetNode\n  } = instanceBinding;\n  let {\n    targetParentNode\n  } = instanceBinding;\n  let needsRerender = false;\n  if (targetParentNode) {\n    // already rendered once\n    needsRerender = doChildrenNeedRerender(targetParentNode, newChildren);\n  } else {\n    // first render of list\n    needsRerender = true;\n    instanceBinding.targetNode = undefined; // placeholder node not needed anymore, free memory\n    instanceBinding.targetParentNode = targetParentNode = targetNode.parentNode;\n  }\n  // avoid re-rendering list if the dom nodes are exactly the same before and after\n  if (needsRerender) {\n    replaceChildren(targetParentNode, newChildren);\n  }\n}\nfunction patch(expressions, instanceBindings) {\n  for (const instanceBinding of instanceBindings) {\n    const {\n      targetNode,\n      currentExpression,\n      binding: {\n        expressionIndex,\n        attributeName,\n        attributeValuePre,\n        attributeValuePost\n      }\n    } = instanceBinding;\n    const expression = expressions[expressionIndex];\n    if (currentExpression === expression) {\n      // no need to update, same as before\n      continue;\n    }\n    instanceBinding.currentExpression = expression;\n    if (attributeName) {\n      // attribute replacement\n      targetNode.setAttribute(attributeName, attributeValuePre + toString(expression) + attributeValuePost);\n    } else {\n      // text node / child element / children replacement\n      let newNode;\n      if (Array.isArray(expression)) {\n        // array of DOM elements produced by tag template literals\n        patchChildren(expression, instanceBinding);\n      } else if (expression instanceof Element) {\n        // html tag template returning a DOM element\n        newNode = expression;\n        targetNode.replaceWith(newNode);\n      } else {\n        // primitive - string, number, etc\n        // nodeValue is faster than textContent supposedly https://www.youtube.com/watch?v=LY6y3HbDVmg\n        // note we may be replacing the value in a placeholder text node\n        targetNode.nodeValue = toString(expression);\n      }\n      if (newNode) {\n        instanceBinding.targetNode = newNode;\n      }\n    }\n  }\n}\nfunction parse(tokens) {\n  let htmlString = '';\n  let withinTag = false;\n  let withinAttribute = false;\n  let elementIndexCounter = -1; // depth-first traversal order\n\n  const elementsToBindings = new Map();\n  const elementIndexes = [];\n  for (let i = 0, len = tokens.length; i < len; i++) {\n    const token = tokens[i];\n    htmlString += token;\n    if (i === len - 1) {\n      break; // no need to process characters - no more expressions to be found\n    }\n    for (let j = 0; j < token.length; j++) {\n      const char = token.charAt(j);\n      switch (char) {\n        case '<':\n          {\n            const nextChar = token.charAt(j + 1);\n            if (nextChar === '/') {\n              // closing tag\n              // leaving an element\n              elementIndexes.pop();\n            } else {\n              // not a closing tag\n              withinTag = true;\n              elementIndexes.push(++elementIndexCounter);\n            }\n            break;\n          }\n        case '>':\n          {\n            withinTag = false;\n            withinAttribute = false;\n            break;\n          }\n        case '=':\n          {\n            withinAttribute = true;\n            break;\n          }\n      }\n    }\n    const elementIndex = elementIndexes[elementIndexes.length - 1];\n    const bindings = getFromMap(elementsToBindings, elementIndex, () => []);\n    let attributeName;\n    let attributeValuePre;\n    let attributeValuePost;\n    if (withinAttribute) {\n      // I never use single-quotes for attribute values in HTML, so just support double-quotes or no-quotes\n      const match = /(\\S+)=\"?([^\"=]*)$/.exec(token);\n      attributeName = match[1];\n      attributeValuePre = match[2];\n      attributeValuePost = /^[^\">]*/.exec(tokens[i + 1])[0];\n    }\n    const binding = {\n      attributeName,\n      attributeValuePre,\n      attributeValuePost,\n      expressionIndex: i\n    };\n    bindings.push(binding);\n    if (!withinTag && !withinAttribute) {\n      // Add a placeholder text node, so we can find it later. Note we only support one dynamic child text node\n      htmlString += ' ';\n    }\n  }\n  const template = parseTemplate(htmlString);\n  return {\n    template,\n    elementsToBindings\n  };\n}\nfunction applyBindings(bindings, element, instanceBindings) {\n  for (let i = 0; i < bindings.length; i++) {\n    const binding = bindings[i];\n    const targetNode = binding.attributeName ? element // attribute binding, just use the element itself\n    : element.firstChild; // not an attribute binding, so has a placeholder text node\n\n    const instanceBinding = {\n      binding,\n      targetNode,\n      targetParentNode: undefined,\n      currentExpression: undefined\n    };\n    instanceBindings.push(instanceBinding);\n  }\n}\nfunction traverseAndSetupBindings(rootElement, elementsToBindings) {\n  const instanceBindings = [];\n  let topLevelBindings;\n  if (elementsToBindings.size === 1 && (topLevelBindings = elementsToBindings.get(0))) {\n    // Optimization for the common case where there's only one element and one binding\n    // Skip creating a TreeWalker entirely and just handle the root DOM element\n    applyBindings(topLevelBindings, rootElement, instanceBindings);\n  } else {\n    // traverse dom\n    const treeWalker = document.createTreeWalker(rootElement, NodeFilter.SHOW_ELEMENT);\n    let element = rootElement;\n    let elementIndex = -1;\n    do {\n      const bindings = elementsToBindings.get(++elementIndex);\n      if (bindings) {\n        applyBindings(bindings, element, instanceBindings);\n      }\n    } while (element = treeWalker.nextNode());\n  }\n  return instanceBindings;\n}\nfunction parseHtml(tokens) {\n  // All templates and bound expressions are unique per tokens array\n  const {\n    template,\n    elementsToBindings\n  } = getFromMap(parseCache, tokens, () => parse(tokens));\n\n  // When we parseHtml, we always return a fresh DOM instance ready to be updated\n  const dom = template.cloneNode(true).content.firstElementChild;\n  const instanceBindings = traverseAndSetupBindings(dom, elementsToBindings);\n  return function updateDomInstance(expressions) {\n    patch(expressions, instanceBindings);\n    return dom;\n  };\n}\nfunction createFramework(state) {\n  const domInstances = getFromMap(domInstancesCache, state, () => new Map());\n  let domInstanceCacheKey = unkeyedSymbol;\n  function html(tokens, ...expressions) {\n    // Each unique lexical usage of map() is considered unique due to the html`` tagged template call it makes,\n    // which has lexically unique tokens. The unkeyed symbol is just used for html`` usage outside of a map().\n    const domInstancesForTokens = getFromMap(domInstances, tokens, () => new Map());\n    const updateDomInstance = getFromMap(domInstancesForTokens, domInstanceCacheKey, () => parseHtml(tokens));\n    return updateDomInstance(expressions); // update with expressions\n  }\n  function map(array, callback, keyFunction) {\n    return array.map((item, index) => {\n      const originalCacheKey = domInstanceCacheKey;\n      domInstanceCacheKey = keyFunction(item);\n      try {\n        return callback(item, index);\n      } finally {\n        domInstanceCacheKey = originalCacheKey;\n      }\n    });\n  }\n  return {\n    map,\n    html\n  };\n}\nfunction render(container, state, helpers, events, actions, refs, abortSignal, actionContext, firstRender) {\n  const {\n    labelWithSkin,\n    titleForEmoji,\n    unicodeWithSkin\n  } = helpers;\n  const {\n    html,\n    map\n  } = createFramework(state);\n  function emojiList(emojis, searchMode, prefix) {\n    return map(emojis, (emoji, i) => {\n      return html`<button role=\"${searchMode ? 'option' : 'menuitem'}\" aria-selected=\"${searchMode ? i === state.activeSearchItem : ''}\" aria-label=\"${labelWithSkin(emoji, state.currentSkinTone)}\" title=\"${titleForEmoji(emoji)}\" class=\"${'emoji' + (searchMode && i === state.activeSearchItem ? ' active' : '') + (emoji.unicode ? '' : ' custom-emoji')}\" id=\"${`${prefix}-${emoji.id}`}\" style=\"${emoji.unicode ? '' : `--custom-emoji-background: url(${JSON.stringify(emoji.url)})`}\">${emoji.unicode ? unicodeWithSkin(emoji, state.currentSkinTone) : ''}</button>`;\n      // It's important for the cache key to be unique based on the prefix, because the framework caches based on the\n      // unique tokens + cache key, and the same emoji may be used in the tab as well as in the fav bar\n    }, emoji => `${prefix}-${emoji.id}`);\n  }\n  const section = () => {\n    return html`<section data-ref=\"rootElement\" class=\"picker\" aria-label=\"${state.i18n.regionLabel}\" style=\"${state.pickerStyle || ''}\"><div class=\"pad-top\"></div><div class=\"search-row\"><div class=\"search-wrapper\"><input id=\"search\" class=\"search\" type=\"search\" role=\"combobox\" enterkeyhint=\"search\" placeholder=\"${state.i18n.searchLabel}\" autocapitalize=\"none\" autocomplete=\"off\" spellcheck=\"true\" aria-expanded=\"${!!(state.searchMode && state.currentEmojis.length)}\" aria-controls=\"search-results\" aria-describedby=\"search-description\" aria-autocomplete=\"list\" aria-activedescendant=\"${state.activeSearchItemId ? `emo-${state.activeSearchItemId}` : ''}\" data-ref=\"searchElement\" data-on-input=\"onSearchInput\" data-on-keydown=\"onSearchKeydown\"><label class=\"sr-only\" for=\"search\">${state.i18n.searchLabel}</label> <span id=\"search-description\" class=\"sr-only\">${state.i18n.searchDescription}</span></div><div class=\"skintone-button-wrapper ${state.skinTonePickerExpandedAfterAnimation ? 'expanded' : ''}\"><button id=\"skintone-button\" class=\"emoji ${state.skinTonePickerExpanded ? 'hide-focus' : ''}\" aria-label=\"${state.skinToneButtonLabel}\" title=\"${state.skinToneButtonLabel}\" aria-describedby=\"skintone-description\" aria-haspopup=\"listbox\" aria-expanded=\"${state.skinTonePickerExpanded}\" aria-controls=\"skintone-list\" data-on-click=\"onClickSkinToneButton\">${state.skinToneButtonText || ''}</button></div><span id=\"skintone-description\" class=\"sr-only\">${state.i18n.skinToneDescription}</span><div data-ref=\"skinToneDropdown\" id=\"skintone-list\" class=\"skintone-list hide-focus ${state.skinTonePickerExpanded ? '' : 'hidden no-animate'}\" style=\"transform:translateY(${state.skinTonePickerExpanded ? 0 : 'calc(-1 * var(--num-skintones) * var(--total-emoji-size))'})\" role=\"listbox\" aria-label=\"${state.i18n.skinTonesLabel}\" aria-activedescendant=\"skintone-${state.activeSkinTone}\" aria-hidden=\"${!state.skinTonePickerExpanded}\" tabIndex=\"-1\" data-on-focusout=\"onSkinToneOptionsFocusOut\" data-on-click=\"onSkinToneOptionsClick\" data-on-keydown=\"onSkinToneOptionsKeydown\" data-on-keyup=\"onSkinToneOptionsKeyup\">${map(state.skinTones, (skinTone, i) => {\n      return html`<div id=\"skintone-${i}\" class=\"emoji ${i === state.activeSkinTone ? 'active' : ''}\" aria-selected=\"${i === state.activeSkinTone}\" role=\"option\" title=\"${state.i18n.skinTones[i]}\" aria-label=\"${state.i18n.skinTones[i]}\">${skinTone}</div>`;\n    }, skinTone => skinTone)}</div></div><div class=\"nav\" role=\"tablist\" style=\"grid-template-columns:repeat(${state.groups.length},1fr)\" aria-label=\"${state.i18n.categoriesLabel}\" data-on-keydown=\"onNavKeydown\" data-on-click=\"onNavClick\">${map(state.groups, group => {\n      return html`<button role=\"tab\" class=\"nav-button\" aria-controls=\"tab-${group.id}\" aria-label=\"${state.i18n.categories[group.name]}\" aria-selected=\"${!state.searchMode && state.currentGroup.id === group.id}\" title=\"${state.i18n.categories[group.name]}\" data-group-id=\"${group.id}\"><div class=\"nav-emoji emoji\">${group.emoji}</div></button>`;\n    }, group => group.id)}</div><div class=\"indicator-wrapper\"><div class=\"indicator\" style=\"transform:translateX(${( /* istanbul ignore next */state.isRtl ? -1 : 1) * state.currentGroupIndex * 100}%)\"></div></div><div class=\"message ${state.message ? '' : 'gone'}\" role=\"alert\" aria-live=\"polite\">${state.message || ''}</div><div data-ref=\"tabpanelElement\" class=\"tabpanel ${!state.databaseLoaded || state.message ? 'gone' : ''}\" role=\"${state.searchMode ? 'region' : 'tabpanel'}\" aria-label=\"${state.searchMode ? state.i18n.searchResultsLabel : state.i18n.categories[state.currentGroup.name]}\" id=\"${state.searchMode ? '' : `tab-${state.currentGroup.id}`}\" tabIndex=\"0\" data-on-click=\"onEmojiClick\"><div data-action=\"calculateEmojiGridStyle\">${map(state.currentEmojisWithCategories, (emojiWithCategory, i) => {\n      return html`<div><div id=\"menu-label-${i}\" class=\"category ${state.currentEmojisWithCategories.length === 1 && state.currentEmojisWithCategories[0].category === '' ? 'gone' : ''}\" aria-hidden=\"true\">${state.searchMode ? state.i18n.searchResultsLabel : emojiWithCategory.category ? emojiWithCategory.category : state.currentEmojisWithCategories.length > 1 ? state.i18n.categories.custom : state.i18n.categories[state.currentGroup.name]}</div><div class=\"emoji-menu ${i !== 0 && !state.searchMode && state.currentGroup.id === -1 ? 'visibility-auto' : ''}\" style=\"${`--num-rows: ${Math.ceil(emojiWithCategory.emojis.length / state.numColumns)}`}\" data-action=\"updateOnIntersection\" role=\"${state.searchMode ? 'listbox' : 'menu'}\" aria-labelledby=\"menu-label-${i}\" id=\"${state.searchMode ? 'search-results' : ''}\">${emojiList(emojiWithCategory.emojis, state.searchMode, /* prefix */'emo')}</div></div>`;\n    }, emojiWithCategory => emojiWithCategory.category)}</div></div><div class=\"favorites onscreen emoji-menu ${state.message ? 'gone' : ''}\" role=\"menu\" aria-label=\"${state.i18n.favoritesLabel}\" data-on-click=\"onEmojiClick\">${emojiList(state.currentFavorites, /* searchMode */false, /* prefix */'fav')}</div><button data-ref=\"baselineEmoji\" aria-hidden=\"true\" tabindex=\"-1\" class=\"abs-pos hidden emoji baseline-emoji\">😀</button></section>`;\n  };\n  const rootDom = section();\n\n  // helper for traversing the dom, finding elements by an attribute, and getting the attribute value\n  const forElementWithAttribute = (attributeName, callback) => {\n    for (const element of container.querySelectorAll(`[${attributeName}]`)) {\n      callback(element, element.getAttribute(attributeName));\n    }\n  };\n  if (firstRender) {\n    // not a re-render\n    container.appendChild(rootDom);\n\n    // we only bind events/refs once - there is no need to find them again given this component structure\n\n    // bind events\n    for (const eventName of ['click', 'focusout', 'input', 'keydown', 'keyup']) {\n      forElementWithAttribute(`data-on-${eventName}`, (element, listenerName) => {\n        element.addEventListener(eventName, events[listenerName]);\n      });\n    }\n\n    // find refs\n    forElementWithAttribute('data-ref', (element, ref) => {\n      refs[ref] = element;\n    });\n\n    // destroy/abort logic\n    abortSignal.addEventListener('abort', () => {\n      container.removeChild(rootDom);\n    });\n  }\n\n  // set up actions - these are re-bound on every render\n  forElementWithAttribute('data-action', (element, action) => {\n    let boundActions = actionContext.get(action);\n    if (!boundActions) {\n      actionContext.set(action, boundActions = new WeakSet());\n    }\n\n    // avoid applying the same action to the same element multiple times\n    if (!boundActions.has(element)) {\n      boundActions.add(element);\n      actions[action](element);\n    }\n  });\n}\n\n/* istanbul ignore next */\nconst qM = typeof queueMicrotask === 'function' ? queueMicrotask : callback => Promise.resolve().then(callback);\nfunction createState(abortSignal) {\n  let destroyed = false;\n  let currentObserver;\n  const propsToObservers = new Map();\n  const dirtyObservers = new Set();\n  let queued;\n  const flush = () => {\n    if (destroyed) {\n      return;\n    }\n    const observersToRun = [...dirtyObservers];\n    dirtyObservers.clear(); // clear before running to force any new updates to run in another tick of the loop\n    try {\n      for (const observer of observersToRun) {\n        observer();\n      }\n    } finally {\n      queued = false;\n      if (dirtyObservers.size) {\n        // new updates, queue another one\n        queued = true;\n        qM(flush);\n      }\n    }\n  };\n  const state = new Proxy({}, {\n    get(target, prop) {\n      if (currentObserver) {\n        let observers = propsToObservers.get(prop);\n        if (!observers) {\n          observers = new Set();\n          propsToObservers.set(prop, observers);\n        }\n        observers.add(currentObserver);\n      }\n      return target[prop];\n    },\n    set(target, prop, newValue) {\n      if (target[prop] !== newValue) {\n        target[prop] = newValue;\n        const observers = propsToObservers.get(prop);\n        if (observers) {\n          for (const observer of observers) {\n            dirtyObservers.add(observer);\n          }\n          if (!queued) {\n            queued = true;\n            qM(flush);\n          }\n        }\n      }\n      return true;\n    }\n  });\n  const createEffect = callback => {\n    const runnable = () => {\n      const oldObserver = currentObserver;\n      currentObserver = runnable;\n      try {\n        return callback();\n      } finally {\n        currentObserver = oldObserver;\n      }\n    };\n    return runnable();\n  };\n\n  // destroy logic\n  abortSignal.addEventListener('abort', () => {\n    destroyed = true;\n  });\n  return {\n    state,\n    createEffect\n  };\n}\n\n// Compare two arrays, with a function called on each item in the two arrays that returns true if the items are equal\nfunction arraysAreEqualByFunction(left, right, areEqualFunc) {\n  if (left.length !== right.length) {\n    return false;\n  }\n  for (let i = 0; i < left.length; i++) {\n    if (!areEqualFunc(left[i], right[i])) {\n      return false;\n    }\n  }\n  return true;\n}\nconst intersectionObserverCache = new WeakMap();\nfunction intersectionObserverAction(node, abortSignal, listener) {\n  /* istanbul ignore else */\n  {\n    // The scroll root is always `.tabpanel`\n    const root = node.closest('.tabpanel');\n    let observer = intersectionObserverCache.get(root);\n    if (!observer) {\n      // TODO: replace this with the contentvisibilityautostatechange event when all supported browsers support it.\n      // For now we use IntersectionObserver because it has better cross-browser support, and it would be bad for\n      // old Safari versions if they eagerly downloaded all custom emoji all at once.\n      observer = new IntersectionObserver(listener, {\n        root,\n        // trigger if we are 1/2 scroll container height away so that the images load a bit quicker while scrolling\n        rootMargin: '50% 0px 50% 0px',\n        // trigger if any part of the emoji grid is intersecting\n        threshold: 0\n      });\n\n      // avoid creating a new IntersectionObserver for every category; just use one for the whole root\n      intersectionObserverCache.set(root, observer);\n\n      // assume that the abortSignal is always the same for this root node; just add one event listener\n      abortSignal.addEventListener('abort', () => {\n        observer.disconnect();\n      });\n    }\n    observer.observe(node);\n  }\n}\n\n/* eslint-disable prefer-const,no-labels,no-inner-declarations */\n\n// constants\nconst EMPTY_ARRAY = [];\nconst {\n  assign\n} = Object;\nfunction createRoot(shadowRoot, props) {\n  const refs = {};\n  const abortController = new AbortController();\n  const abortSignal = abortController.signal;\n  const {\n    state,\n    createEffect\n  } = createState(abortSignal);\n  const actionContext = new Map();\n\n  // initial state\n  assign(state, {\n    skinToneEmoji: undefined,\n    i18n: undefined,\n    database: undefined,\n    customEmoji: undefined,\n    customCategorySorting: undefined,\n    emojiVersion: undefined\n  });\n\n  // public props\n  assign(state, props);\n\n  // private props\n  assign(state, {\n    initialLoad: true,\n    currentEmojis: [],\n    currentEmojisWithCategories: [],\n    rawSearchText: '',\n    searchText: '',\n    searchMode: false,\n    activeSearchItem: -1,\n    message: undefined,\n    skinTonePickerExpanded: false,\n    skinTonePickerExpandedAfterAnimation: false,\n    currentSkinTone: 0,\n    activeSkinTone: 0,\n    skinToneButtonText: undefined,\n    pickerStyle: undefined,\n    skinToneButtonLabel: '',\n    skinTones: [],\n    currentFavorites: [],\n    defaultFavoriteEmojis: undefined,\n    numColumns: DEFAULT_NUM_COLUMNS,\n    isRtl: false,\n    currentGroupIndex: 0,\n    groups: groups,\n    databaseLoaded: false,\n    activeSearchItemId: undefined\n  });\n\n  //\n  // Update the current group based on the currentGroupIndex\n  //\n  createEffect(() => {\n    if (state.currentGroup !== state.groups[state.currentGroupIndex]) {\n      state.currentGroup = state.groups[state.currentGroupIndex];\n    }\n  });\n\n  //\n  // Utils/helpers\n  //\n\n  const focus = id => {\n    shadowRoot.getElementById(id).focus();\n  };\n  const emojiToDomNode = emoji => shadowRoot.getElementById(`emo-${emoji.id}`);\n\n  // fire a custom event that crosses the shadow boundary\n  const fireEvent = (name, detail) => {\n    refs.rootElement.dispatchEvent(new CustomEvent(name, {\n      detail,\n      bubbles: true,\n      composed: true\n    }));\n  };\n\n  //\n  // Comparison utils\n  //\n\n  const compareEmojiArrays = (a, b) => a.id === b.id;\n  const compareCurrentEmojisWithCategories = (a, b) => {\n    const {\n      category: aCategory,\n      emojis: aEmojis\n    } = a;\n    const {\n      category: bCategory,\n      emojis: bEmojis\n    } = b;\n    if (aCategory !== bCategory) {\n      return false;\n    }\n    return arraysAreEqualByFunction(aEmojis, bEmojis, compareEmojiArrays);\n  };\n\n  //\n  // Update utils to avoid excessive re-renders\n  //\n\n  // avoid excessive re-renders by checking the value before setting\n  const updateCurrentEmojis = newEmojis => {\n    if (!arraysAreEqualByFunction(state.currentEmojis, newEmojis, compareEmojiArrays)) {\n      state.currentEmojis = newEmojis;\n    }\n  };\n\n  // avoid excessive re-renders\n  const updateSearchMode = newSearchMode => {\n    if (state.searchMode !== newSearchMode) {\n      state.searchMode = newSearchMode;\n    }\n  };\n\n  // avoid excessive re-renders\n  const updateCurrentEmojisWithCategories = newEmojisWithCategories => {\n    if (!arraysAreEqualByFunction(state.currentEmojisWithCategories, newEmojisWithCategories, compareCurrentEmojisWithCategories)) {\n      state.currentEmojisWithCategories = newEmojisWithCategories;\n    }\n  };\n\n  // Helpers used by PickerTemplate\n\n  const unicodeWithSkin = (emoji, currentSkinTone) => currentSkinTone && emoji.skins && emoji.skins[currentSkinTone] || emoji.unicode;\n  const labelWithSkin = (emoji, currentSkinTone) => uniq([emoji.name || unicodeWithSkin(emoji, currentSkinTone), emoji.annotation, ...(emoji.shortcodes || EMPTY_ARRAY)].filter(Boolean)).join(', ');\n  const titleForEmoji = emoji => emoji.annotation || (emoji.shortcodes || EMPTY_ARRAY).join(', ');\n  const helpers = {\n    labelWithSkin,\n    titleForEmoji,\n    unicodeWithSkin\n  };\n  const events = {\n    onClickSkinToneButton,\n    onEmojiClick,\n    onNavClick,\n    onNavKeydown,\n    onSearchKeydown,\n    onSkinToneOptionsClick,\n    onSkinToneOptionsFocusOut,\n    onSkinToneOptionsKeydown,\n    onSkinToneOptionsKeyup,\n    onSearchInput\n  };\n  const actions = {\n    calculateEmojiGridStyle,\n    updateOnIntersection\n  };\n  let firstRender = true;\n  createEffect(() => {\n    render(shadowRoot, state, helpers, events, actions, refs, abortSignal, actionContext, firstRender);\n    firstRender = false;\n  });\n\n  //\n  // Determine the emoji support level (in requestIdleCallback)\n  //\n\n  // mount logic\n  if (!state.emojiVersion) {\n    detectEmojiSupportLevel().then(level => {\n      // Can't actually test emoji support in Jest/Vitest/JSDom, emoji never render in color in Cairo\n      /* istanbul ignore next */\n      if (!level) {\n        state.message = state.i18n.emojiUnsupportedMessage;\n      }\n    });\n  }\n\n  //\n  // Set or update the database object\n  //\n\n  createEffect(() => {\n    // show a Loading message if it takes a long time, or show an error if there's a network/IDB error\n    async function handleDatabaseLoading() {\n      let showingLoadingMessage = false;\n      const timeoutHandle = setTimeout(() => {\n        showingLoadingMessage = true;\n        state.message = state.i18n.loadingMessage;\n      }, TIMEOUT_BEFORE_LOADING_MESSAGE);\n      try {\n        await state.database.ready();\n        state.databaseLoaded = true; // eslint-disable-line no-unused-vars\n      } catch (err) {\n        console.error(err);\n        state.message = state.i18n.networkErrorMessage;\n      } finally {\n        clearTimeout(timeoutHandle);\n        if (showingLoadingMessage) {\n          // Seems safer than checking the i18n string, which may change\n          showingLoadingMessage = false;\n          state.message = ''; // eslint-disable-line no-unused-vars\n        }\n      }\n    }\n    if (state.database) {\n      /* no await */\n      handleDatabaseLoading();\n    }\n  });\n\n  //\n  // Global styles for the entire picker\n  //\n\n  createEffect(() => {\n    state.pickerStyle = `\n      --num-groups: ${state.groups.length}; \n      --indicator-opacity: ${state.searchMode ? 0 : 1}; \n      --num-skintones: ${NUM_SKIN_TONES};`;\n  });\n\n  //\n  // Set or update the customEmoji\n  //\n\n  createEffect(() => {\n    if (state.customEmoji && state.database) {\n      updateCustomEmoji(); // re-run whenever customEmoji change\n    }\n  });\n  createEffect(() => {\n    if (state.customEmoji && state.customEmoji.length) {\n      if (state.groups !== allGroups) {\n        // don't update unnecessarily\n        state.groups = allGroups;\n      }\n    } else if (state.groups !== groups) {\n      if (state.currentGroupIndex) {\n        // If the current group is anything other than \"custom\" (which is first), decrement.\n        // This fixes the odd case where you set customEmoji, then pick a category, then unset customEmoji\n        state.currentGroupIndex--;\n      }\n      state.groups = groups;\n    }\n  });\n\n  //\n  // Set or update the preferred skin tone\n  //\n\n  createEffect(() => {\n    async function updatePreferredSkinTone() {\n      if (state.databaseLoaded) {\n        state.currentSkinTone = await state.database.getPreferredSkinTone();\n      }\n    }\n\n    /* no await */\n    updatePreferredSkinTone();\n  });\n  createEffect(() => {\n    state.skinTones = Array(NUM_SKIN_TONES).fill().map((_, i) => applySkinTone(state.skinToneEmoji, i));\n  });\n  createEffect(() => {\n    state.skinToneButtonText = state.skinTones[state.currentSkinTone];\n  });\n  createEffect(() => {\n    state.skinToneButtonLabel = state.i18n.skinToneLabel.replace('{skinTone}', state.i18n.skinTones[state.currentSkinTone]);\n  });\n\n  //\n  // Set or update the favorites emojis\n  //\n\n  createEffect(() => {\n    async function updateDefaultFavoriteEmojis() {\n      const {\n        database\n      } = state;\n      const favs = (await Promise.all(MOST_COMMONLY_USED_EMOJI.map(unicode => database.getEmojiByUnicodeOrName(unicode)))).filter(Boolean); // filter because in Jest/Vitest tests we don't have all the emoji in the DB\n      state.defaultFavoriteEmojis = favs;\n    }\n    if (state.databaseLoaded) {\n      /* no await */updateDefaultFavoriteEmojis();\n    }\n  });\n  function updateCustomEmoji() {\n    // Certain effects have an implicit dependency on customEmoji since it affects the database\n    // Getting it here on the state ensures this effect re-runs when customEmoji change.\n    const {\n      customEmoji,\n      database\n    } = state;\n    const databaseCustomEmoji = customEmoji || EMPTY_ARRAY;\n    if (database.customEmoji !== databaseCustomEmoji) {\n      // Avoid setting this if the customEmoji have _not_ changed, because the setter triggers a re-computation of the\n      // `customEmojiIndex`. Note we don't bother with deep object changes.\n      database.customEmoji = databaseCustomEmoji;\n    }\n  }\n  createEffect(() => {\n    async function updateFavorites() {\n      updateCustomEmoji(); // re-run whenever customEmoji change\n      const {\n        database,\n        defaultFavoriteEmojis,\n        numColumns\n      } = state;\n      const dbFavorites = await database.getTopFavoriteEmoji(numColumns);\n      const favorites = await summarizeEmojis(uniqBy([...dbFavorites, ...defaultFavoriteEmojis], _ => _.unicode || _.name).slice(0, numColumns));\n      state.currentFavorites = favorites;\n    }\n    if (state.databaseLoaded && state.defaultFavoriteEmojis) {\n      /* no await */updateFavorites();\n    }\n  });\n\n  //\n  // Re-run whenever the emoji grid changes size, and re-calc style/layout-related state variables:\n  // 1) Re-calculate the --num-columns var because it may have changed\n  // 2) Re-calculate whether we're in RTL mode or not.\n  //\n  // The benefit of doing this in one place is to align with rAF/ResizeObserver\n  // and do all the calculations in one go. RTL vs LTR is not strictly layout-related,\n  // but since we're already reading the style here, and since it's already aligned with\n  // the rAF loop, this is the most appropriate place to do it perf-wise.\n  //\n\n  function calculateEmojiGridStyle(node) {\n    resizeObserverAction(node, abortSignal, () => {\n      /* istanbul ignore next */\n      {\n        // jsdom throws errors for this kind of fancy stuff\n        // read all the style/layout calculations we need to make\n        const style = getComputedStyle(refs.rootElement);\n        const newNumColumns = parseInt(style.getPropertyValue('--num-columns'), 10);\n        const newIsRtl = style.getPropertyValue('direction') === 'rtl';\n\n        // write to state variables\n        state.numColumns = newNumColumns;\n        state.isRtl = newIsRtl;\n      }\n    });\n  }\n\n  // Re-run whenever the custom emoji in a category are shown/hidden. This is an optimization that simulates\n  // what we'd get from `<img loading=lazy>` but without rendering an `<img>`.\n  function updateOnIntersection(node) {\n    intersectionObserverAction(node, abortSignal, entries => {\n      for (const {\n        target,\n        isIntersecting\n      } of entries) {\n        target.classList.toggle('onscreen', isIntersecting);\n      }\n    });\n  }\n\n  //\n  // Set or update the currentEmojis. Check for invalid ZWJ renderings\n  // (i.e. double emoji).\n  //\n\n  createEffect(() => {\n    async function updateEmojis() {\n      const {\n        searchText,\n        currentGroup,\n        databaseLoaded,\n        customEmoji\n      } = state;\n      if (!databaseLoaded) {\n        state.currentEmojis = [];\n        state.searchMode = false;\n      } else if (searchText.length >= MIN_SEARCH_TEXT_LENGTH) {\n        const newEmojis = await getEmojisBySearchQuery(searchText);\n        if (state.searchText === searchText) {\n          // if the situation changes asynchronously, do not update\n          updateCurrentEmojis(newEmojis);\n          updateSearchMode(true);\n        }\n      } else {\n        // database is loaded and we're not in search mode, so we're in normal category mode\n        const {\n          id: currentGroupId\n        } = currentGroup;\n        // avoid race condition where currentGroupId is -1 and customEmoji is undefined/empty\n        if (currentGroupId !== -1 || customEmoji && customEmoji.length) {\n          const newEmojis = await getEmojisByGroup(currentGroupId);\n          if (state.currentGroup.id === currentGroupId) {\n            // if the situation changes asynchronously, do not update\n            updateCurrentEmojis(newEmojis);\n            updateSearchMode(false);\n          }\n        }\n      }\n    }\n\n    /* no await */\n    updateEmojis();\n  });\n  const resetScrollTopInRaf = () => {\n    rAF(() => resetScrollTopIfPossible(refs.tabpanelElement));\n  };\n\n  // Some emojis have their ligatures rendered as two or more consecutive emojis\n  // We want to treat these the same as unsupported emojis, so we compare their\n  // widths against the baseline widths and remove them as necessary\n  createEffect(() => {\n    const {\n      currentEmojis,\n      emojiVersion\n    } = state;\n    const zwjEmojisToCheck = currentEmojis.filter(emoji => emoji.unicode) // filter custom emoji\n    .filter(emoji => hasZwj(emoji) && !supportedZwjEmojis.has(emoji.unicode));\n    if (!emojiVersion && zwjEmojisToCheck.length) {\n      // render now, check their length later\n      updateCurrentEmojis(currentEmojis);\n      rAF(() => checkZwjSupportAndUpdate(zwjEmojisToCheck));\n    } else {\n      const newEmojis = emojiVersion ? currentEmojis : currentEmojis.filter(isZwjSupported);\n      updateCurrentEmojis(newEmojis);\n      // Reset scroll top to 0 when emojis change\n      resetScrollTopInRaf();\n    }\n  });\n  function checkZwjSupportAndUpdate(zwjEmojisToCheck) {\n    const allSupported = checkZwjSupport(zwjEmojisToCheck, refs.baselineEmoji, emojiToDomNode);\n    if (allSupported) {\n      // Even if all emoji are supported, we still need to reset the scroll top to 0 when emojis change\n      resetScrollTopInRaf();\n    } else {\n      // Force update. We only do this if there are any unsupported ZWJ characters since otherwise,\n      // for browsers that support all emoji, it would be an unnecessary extra re-render.\n      state.currentEmojis = [...state.currentEmojis];\n    }\n  }\n  function isZwjSupported(emoji) {\n    return !emoji.unicode || !hasZwj(emoji) || supportedZwjEmojis.get(emoji.unicode);\n  }\n  async function filterEmojisByVersion(emojis) {\n    const emojiSupportLevel = state.emojiVersion || (await detectEmojiSupportLevel());\n    // !version corresponds to custom emoji\n    return emojis.filter(({\n      version\n    }) => !version || version <= emojiSupportLevel);\n  }\n  async function summarizeEmojis(emojis) {\n    return summarizeEmojisForUI(emojis, state.emojiVersion || (await detectEmojiSupportLevel()));\n  }\n  async function getEmojisByGroup(group) {\n    // -1 is custom emoji\n    const emoji = group === -1 ? state.customEmoji : await state.database.getEmojiByGroup(group);\n    return summarizeEmojis(await filterEmojisByVersion(emoji));\n  }\n  async function getEmojisBySearchQuery(query) {\n    return summarizeEmojis(await filterEmojisByVersion(await state.database.getEmojiBySearchQuery(query)));\n  }\n  createEffect(() => {});\n\n  //\n  // Derive currentEmojisWithCategories from currentEmojis. This is always done even if there\n  // are no categories, because it's just easier to code the HTML this way.\n  //\n\n  createEffect(() => {\n    function calculateCurrentEmojisWithCategories() {\n      const {\n        searchMode,\n        currentEmojis\n      } = state;\n      if (searchMode) {\n        return [{\n          category: '',\n          emojis: currentEmojis\n        }];\n      }\n      const categoriesToEmoji = new Map();\n      for (const emoji of currentEmojis) {\n        const category = emoji.category || '';\n        let emojis = categoriesToEmoji.get(category);\n        if (!emojis) {\n          emojis = [];\n          categoriesToEmoji.set(category, emojis);\n        }\n        emojis.push(emoji);\n      }\n      return [...categoriesToEmoji.entries()].map(([category, emojis]) => ({\n        category,\n        emojis\n      })).sort((a, b) => state.customCategorySorting(a.category, b.category));\n    }\n    const newEmojisWithCategories = calculateCurrentEmojisWithCategories();\n    updateCurrentEmojisWithCategories(newEmojisWithCategories);\n  });\n\n  //\n  // Handle active search item (i.e. pressing up or down while searching)\n  //\n\n  createEffect(() => {\n    state.activeSearchItemId = state.activeSearchItem !== -1 && state.currentEmojis[state.activeSearchItem].id;\n  });\n\n  //\n  // Handle user input on the search input\n  //\n\n  createEffect(() => {\n    const {\n      rawSearchText\n    } = state;\n    rIC(() => {\n      state.searchText = (rawSearchText || '').trim(); // defer to avoid input delays, plus we can trim here\n      state.activeSearchItem = -1;\n    });\n  });\n  function onSearchKeydown(event) {\n    if (!state.searchMode || !state.currentEmojis.length) {\n      return;\n    }\n    const goToNextOrPrevious = previous => {\n      halt(event);\n      state.activeSearchItem = incrementOrDecrement(previous, state.activeSearchItem, state.currentEmojis);\n    };\n    switch (event.key) {\n      case 'ArrowDown':\n        return goToNextOrPrevious(false);\n      case 'ArrowUp':\n        return goToNextOrPrevious(true);\n      case 'Enter':\n        if (state.activeSearchItem === -1) {\n          // focus the first option in the list since the list must be non-empty at this point (it's verified above)\n          state.activeSearchItem = 0;\n        } else {\n          // there is already an active search item\n          halt(event);\n          return clickEmoji(state.currentEmojis[state.activeSearchItem].id);\n        }\n    }\n  }\n\n  //\n  // Handle user input on nav\n  //\n\n  function onNavClick(event) {\n    const {\n      target\n    } = event;\n    const closestTarget = target.closest('.nav-button');\n    /* istanbul ignore if */\n    if (!closestTarget) {\n      return; // This should never happen, but makes me nervous not to have it\n    }\n    const groupId = parseInt(closestTarget.dataset.groupId, 10);\n    refs.searchElement.value = ''; // clear search box input\n    state.rawSearchText = '';\n    state.searchText = '';\n    state.activeSearchItem = -1;\n    state.currentGroupIndex = state.groups.findIndex(_ => _.id === groupId);\n  }\n  function onNavKeydown(event) {\n    const {\n      target,\n      key\n    } = event;\n    const doFocus = el => {\n      if (el) {\n        halt(event);\n        el.focus();\n      }\n    };\n    switch (key) {\n      case 'ArrowLeft':\n        return doFocus(target.previousElementSibling);\n      case 'ArrowRight':\n        return doFocus(target.nextElementSibling);\n      case 'Home':\n        return doFocus(target.parentElement.firstElementChild);\n      case 'End':\n        return doFocus(target.parentElement.lastElementChild);\n    }\n  }\n\n  //\n  // Handle user input on an emoji\n  //\n\n  async function clickEmoji(unicodeOrName) {\n    const emoji = await state.database.getEmojiByUnicodeOrName(unicodeOrName);\n    const emojiSummary = [...state.currentEmojis, ...state.currentFavorites].find(_ => _.id === unicodeOrName);\n    const skinTonedUnicode = emojiSummary.unicode && unicodeWithSkin(emojiSummary, state.currentSkinTone);\n    await state.database.incrementFavoriteEmojiCount(unicodeOrName);\n    fireEvent('emoji-click', {\n      emoji,\n      skinTone: state.currentSkinTone,\n      ...(skinTonedUnicode && {\n        unicode: skinTonedUnicode\n      }),\n      ...(emojiSummary.name && {\n        name: emojiSummary.name\n      })\n    });\n  }\n  async function onEmojiClick(event) {\n    const {\n      target\n    } = event;\n    /* istanbul ignore if */\n    if (!target.classList.contains('emoji')) {\n      // This should never happen, but makes me nervous not to have it\n      return;\n    }\n    halt(event);\n    const id = target.id.substring(4); // replace 'emo-' or 'fav-' prefix\n\n    /* no await */\n    clickEmoji(id);\n  }\n\n  //\n  // Handle user input on the skintone picker\n  //\n\n  function changeSkinTone(skinTone) {\n    state.currentSkinTone = skinTone;\n    state.skinTonePickerExpanded = false;\n    focus('skintone-button');\n    fireEvent('skin-tone-change', {\n      skinTone\n    });\n    /* no await */\n    state.database.setPreferredSkinTone(skinTone);\n  }\n  function onSkinToneOptionsClick(event) {\n    const {\n      target: {\n        id\n      }\n    } = event;\n    const match = id && id.match(/^skintone-(\\d)/); // skintone option format\n    /* istanbul ignore if */\n    if (!match) {\n      // not a skintone option\n      return; // This should never happen, but makes me nervous not to have it\n    }\n    halt(event);\n    const skinTone = parseInt(match[1], 10); // remove 'skintone-' prefix\n    changeSkinTone(skinTone);\n  }\n  function onClickSkinToneButton(event) {\n    state.skinTonePickerExpanded = !state.skinTonePickerExpanded;\n    state.activeSkinTone = state.currentSkinTone;\n    // this should always be true, since the button is obscured by the listbox, so this `if` is just to be sure\n    if (state.skinTonePickerExpanded) {\n      halt(event);\n      rAF(() => focus('skintone-list'));\n    }\n  }\n\n  // To make the animation nicer, change the z-index of the skintone picker button\n  // *after* the animation has played. This makes it appear that the picker box\n  // is expanding \"below\" the button\n  createEffect(() => {\n    if (state.skinTonePickerExpanded) {\n      refs.skinToneDropdown.addEventListener('transitionend', () => {\n        state.skinTonePickerExpandedAfterAnimation = true; // eslint-disable-line no-unused-vars\n      }, {\n        once: true\n      });\n    } else {\n      state.skinTonePickerExpandedAfterAnimation = false; // eslint-disable-line no-unused-vars\n    }\n  });\n  function onSkinToneOptionsKeydown(event) {\n    // this should never happen, but makes me nervous not to have it\n    /* istanbul ignore if */\n    if (!state.skinTonePickerExpanded) {\n      return;\n    }\n    const changeActiveSkinTone = async nextSkinTone => {\n      halt(event);\n      state.activeSkinTone = nextSkinTone;\n    };\n    switch (event.key) {\n      case 'ArrowUp':\n        return changeActiveSkinTone(incrementOrDecrement(true, state.activeSkinTone, state.skinTones));\n      case 'ArrowDown':\n        return changeActiveSkinTone(incrementOrDecrement(false, state.activeSkinTone, state.skinTones));\n      case 'Home':\n        return changeActiveSkinTone(0);\n      case 'End':\n        return changeActiveSkinTone(state.skinTones.length - 1);\n      case 'Enter':\n        // enter on keydown, space on keyup. this is just how browsers work for buttons\n        // https://lists.w3.org/Archives/Public/w3c-wai-ig/2019JanMar/0086.html\n        halt(event);\n        return changeSkinTone(state.activeSkinTone);\n      case 'Escape':\n        halt(event);\n        state.skinTonePickerExpanded = false;\n        return focus('skintone-button');\n    }\n  }\n  function onSkinToneOptionsKeyup(event) {\n    // this should never happen, but makes me nervous not to have it\n    /* istanbul ignore if */\n    if (!state.skinTonePickerExpanded) {\n      return;\n    }\n    switch (event.key) {\n      case ' ':\n        // enter on keydown, space on keyup. this is just how browsers work for buttons\n        // https://lists.w3.org/Archives/Public/w3c-wai-ig/2019JanMar/0086.html\n        halt(event);\n        return changeSkinTone(state.activeSkinTone);\n    }\n  }\n  async function onSkinToneOptionsFocusOut(event) {\n    // On blur outside of the skintone listbox, collapse the skintone picker.\n    const {\n      relatedTarget\n    } = event;\n    // The `else` should never happen, but makes me nervous not to have it\n    /* istanbul ignore else */\n    if (!relatedTarget || relatedTarget.id !== 'skintone-list') {\n      state.skinTonePickerExpanded = false;\n    }\n  }\n  function onSearchInput(event) {\n    state.rawSearchText = event.target.value;\n  }\n  return {\n    $set(newState) {\n      assign(state, newState);\n    },\n    $destroy() {\n      abortController.abort();\n    }\n  };\n}\nconst DEFAULT_DATA_SOURCE = 'https://cdn.jsdelivr.net/npm/emoji-picker-element-data@^1/en/emojibase/data.json';\nconst DEFAULT_LOCALE = 'en';\nvar enI18n = {\n  categoriesLabel: 'Categories',\n  emojiUnsupportedMessage: 'Your browser does not support color emoji.',\n  favoritesLabel: 'Favorites',\n  loadingMessage: 'Loading…',\n  networkErrorMessage: 'Could not load emoji.',\n  regionLabel: 'Emoji picker',\n  searchDescription: 'When search results are available, press up or down to select and enter to choose.',\n  searchLabel: 'Search',\n  searchResultsLabel: 'Search results',\n  skinToneDescription: 'When expanded, press up or down to select and enter to choose.',\n  skinToneLabel: 'Choose a skin tone (currently {skinTone})',\n  skinTonesLabel: 'Skin tones',\n  skinTones: ['Default', 'Light', 'Medium-Light', 'Medium', 'Medium-Dark', 'Dark'],\n  categories: {\n    custom: 'Custom',\n    'smileys-emotion': 'Smileys and emoticons',\n    'people-body': 'People and body',\n    'animals-nature': 'Animals and nature',\n    'food-drink': 'Food and drink',\n    'travel-places': 'Travel and places',\n    activities: 'Activities',\n    objects: 'Objects',\n    symbols: 'Symbols',\n    flags: 'Flags'\n  }\n};\nvar baseStyles = \":host{--emoji-size:1.375rem;--emoji-padding:0.5rem;--category-emoji-size:var(--emoji-size);--category-emoji-padding:var(--emoji-padding);--indicator-height:3px;--input-border-radius:0.5rem;--input-border-size:1px;--input-font-size:1rem;--input-line-height:1.5;--input-padding:0.25rem;--num-columns:8;--outline-size:2px;--border-size:1px;--border-radius:0;--skintone-border-radius:1rem;--category-font-size:1rem;display:flex;width:min-content;height:400px}:host,:host(.light){color-scheme:light;--background:#fff;--border-color:#e0e0e0;--indicator-color:#385ac1;--input-border-color:#999;--input-font-color:#111;--input-placeholder-color:#999;--outline-color:#999;--category-font-color:#111;--button-active-background:#e6e6e6;--button-hover-background:#d9d9d9}:host(.dark){color-scheme:dark;--background:#222;--border-color:#444;--indicator-color:#5373ec;--input-border-color:#ccc;--input-font-color:#efefef;--input-placeholder-color:#ccc;--outline-color:#fff;--category-font-color:#efefef;--button-active-background:#555555;--button-hover-background:#484848}@media (prefers-color-scheme:dark){:host{color-scheme:dark;--background:#222;--border-color:#444;--indicator-color:#5373ec;--input-border-color:#ccc;--input-font-color:#efefef;--input-placeholder-color:#ccc;--outline-color:#fff;--category-font-color:#efefef;--button-active-background:#555555;--button-hover-background:#484848}}:host([hidden]){display:none}button{margin:0;padding:0;border:0;background:0 0;box-shadow:none;-webkit-tap-highlight-color:transparent}button::-moz-focus-inner{border:0}input{padding:0;margin:0;line-height:1.15;font-family:inherit}input[type=search]{-webkit-appearance:none}:focus{outline:var(--outline-color) solid var(--outline-size);outline-offset:calc(-1*var(--outline-size))}:host([data-js-focus-visible]) :focus:not([data-focus-visible-added]){outline:0}:focus:not(:focus-visible){outline:0}.hide-focus{outline:0}*{box-sizing:border-box}.picker{contain:content;display:flex;flex-direction:column;background:var(--background);border:var(--border-size) solid var(--border-color);border-radius:var(--border-radius);width:100%;height:100%;overflow:hidden;--total-emoji-size:calc(var(--emoji-size) + (2 * var(--emoji-padding)));--total-category-emoji-size:calc(var(--category-emoji-size) + (2 * var(--category-emoji-padding)))}.sr-only{position:absolute;width:1px;height:1px;padding:0;margin:-1px;overflow:hidden;clip:rect(0,0,0,0);border:0}.hidden{opacity:0;pointer-events:none}.abs-pos{position:absolute;left:0;top:0}.gone{display:none!important}.skintone-button-wrapper,.skintone-list{background:var(--background);z-index:3}.skintone-button-wrapper.expanded{z-index:1}.skintone-list{position:absolute;inset-inline-end:0;top:0;z-index:2;overflow:visible;border-bottom:var(--border-size) solid var(--border-color);border-radius:0 0 var(--skintone-border-radius) var(--skintone-border-radius);will-change:transform;transition:transform .2s ease-in-out;transform-origin:center 0}@media (prefers-reduced-motion:reduce){.skintone-list{transition-duration:.001s}}@supports not (inset-inline-end:0){.skintone-list{right:0}}.skintone-list.no-animate{transition:none}.tabpanel{overflow-y:auto;scrollbar-gutter:stable;-webkit-overflow-scrolling:touch;will-change:transform;min-height:0;flex:1;contain:content}.emoji-menu{display:grid;grid-template-columns:repeat(var(--num-columns),var(--total-emoji-size));justify-content:space-around;align-items:flex-start;width:100%}.emoji-menu.visibility-auto{content-visibility:auto;contain-intrinsic-size:calc(var(--num-columns)*var(--total-emoji-size)) calc(var(--num-rows)*var(--total-emoji-size))}.category{padding:var(--emoji-padding);font-size:var(--category-font-size);color:var(--category-font-color)}.emoji,button.emoji{font-size:var(--emoji-size);display:flex;align-items:center;justify-content:center;border-radius:100%;height:var(--total-emoji-size);width:var(--total-emoji-size);line-height:1;overflow:hidden;font-family:var(--emoji-font-family);cursor:pointer}@media (hover:hover) and (pointer:fine){.emoji:hover,button.emoji:hover{background:var(--button-hover-background)}}.emoji.active,.emoji:active,button.emoji.active,button.emoji:active{background:var(--button-active-background)}.onscreen .custom-emoji::after{content:\\\"\\\";width:var(--emoji-size);height:var(--emoji-size);background-repeat:no-repeat;background-position:center center;background-size:contain;background-image:var(--custom-emoji-background)}.nav,.nav-button{align-items:center}.nav{display:grid;justify-content:space-between;contain:content}.nav-button{display:flex;justify-content:center}.nav-emoji{font-size:var(--category-emoji-size);width:var(--total-category-emoji-size);height:var(--total-category-emoji-size)}.indicator-wrapper{display:flex;border-bottom:1px solid var(--border-color)}.indicator{width:calc(100%/var(--num-groups));height:var(--indicator-height);opacity:var(--indicator-opacity);background-color:var(--indicator-color);will-change:transform,opacity;transition:opacity .1s linear,transform .25s ease-in-out}@media (prefers-reduced-motion:reduce){.indicator{will-change:opacity;transition:opacity .1s linear}}.pad-top,input.search{background:var(--background);width:100%}.pad-top{height:var(--emoji-padding);z-index:3}.search-row{display:flex;align-items:center;position:relative;padding-inline-start:var(--emoji-padding);padding-bottom:var(--emoji-padding)}.search-wrapper{flex:1;min-width:0}input.search{padding:var(--input-padding);border-radius:var(--input-border-radius);border:var(--input-border-size) solid var(--input-border-color);color:var(--input-font-color);font-size:var(--input-font-size);line-height:var(--input-line-height)}input.search::placeholder{color:var(--input-placeholder-color)}.favorites{overflow-y:auto;scrollbar-gutter:stable;display:flex;flex-direction:row;border-top:var(--border-size) solid var(--border-color);contain:content}.message{padding:var(--emoji-padding)}\";\nconst PROPS = ['customEmoji', 'customCategorySorting', 'database', 'dataSource', 'i18n', 'locale', 'skinToneEmoji', 'emojiVersion'];\n\n// Styles injected ourselves, so we can declare the FONT_FAMILY variable in one place\nconst EXTRA_STYLES = `:host{--emoji-font-family:${FONT_FAMILY}}`;\nclass PickerElement extends HTMLElement {\n  constructor(props) {\n    super();\n    this.attachShadow({\n      mode: 'open'\n    });\n    const style = document.createElement('style');\n    style.textContent = baseStyles + EXTRA_STYLES;\n    this.shadowRoot.appendChild(style);\n    this._ctx = {\n      // Set defaults\n      locale: DEFAULT_LOCALE,\n      dataSource: DEFAULT_DATA_SOURCE,\n      skinToneEmoji: DEFAULT_SKIN_TONE_EMOJI,\n      customCategorySorting: DEFAULT_CATEGORY_SORTING,\n      customEmoji: null,\n      i18n: enI18n,\n      emojiVersion: null,\n      ...props\n    };\n    // Handle properties set before the element was upgraded\n    for (const prop of PROPS) {\n      if (prop !== 'database' && Object.prototype.hasOwnProperty.call(this, prop)) {\n        this._ctx[prop] = this[prop];\n        delete this[prop];\n      }\n    }\n    this._dbFlush(); // wait for a flush before creating the db, in case the user calls e.g. a setter or setAttribute\n  }\n  connectedCallback() {\n    // The _cmp may be defined if the component was immediately disconnected and then reconnected. In that case,\n    // do nothing (preserve the state)\n    if (!this._cmp) {\n      this._cmp = createRoot(this.shadowRoot, this._ctx);\n    }\n  }\n  disconnectedCallback() {\n    // Check in a microtask if the element is still connected. If so, treat this as a \"move\" rather than a disconnect\n    // Inspired by Vue: https://vuejs.org/guide/extras/web-components.html#building-custom-elements-with-vue\n    qM(() => {\n      // this._cmp may be defined if connect-disconnect-connect-disconnect occurs synchronously\n      if (!this.isConnected && this._cmp) {\n        this._cmp.$destroy();\n        this._cmp = undefined;\n        const {\n          database\n        } = this._ctx;\n        database.close()\n        // only happens if the database failed to load in the first place, so we don't care\n        .catch(err => console.error(err));\n      }\n    });\n  }\n  static get observedAttributes() {\n    return ['locale', 'data-source', 'skin-tone-emoji', 'emoji-version']; // complex objects aren't supported, also use kebab-case\n  }\n  attributeChangedCallback(attrName, oldValue, newValue) {\n    this._set(\n    // convert from kebab-case to camelcase\n    // see https://github.com/sveltejs/svelte/issues/3852#issuecomment-665037015\n    attrName.replace(/-([a-z])/g, (_, up) => up.toUpperCase()),\n    // convert string attribute to float if necessary\n    attrName === 'emoji-version' ? parseFloat(newValue) : newValue);\n  }\n  _set(prop, newValue) {\n    this._ctx[prop] = newValue;\n    if (this._cmp) {\n      this._cmp.$set({\n        [prop]: newValue\n      });\n    }\n    if (['locale', 'dataSource'].includes(prop)) {\n      this._dbFlush();\n    }\n  }\n  _dbCreate() {\n    const {\n      locale,\n      dataSource,\n      database\n    } = this._ctx;\n    // only create a new database if we really need to\n    if (!database || database.locale !== locale || database.dataSource !== dataSource) {\n      this._set('database', new Database({\n        locale,\n        dataSource\n      }));\n    }\n  }\n\n  // Update the Database in one microtask if the locale/dataSource change. We do one microtask\n  // so we don't create two Databases if e.g. both the locale and the dataSource change\n  _dbFlush() {\n    qM(() => this._dbCreate());\n  }\n}\nconst definitions = {};\nfor (const prop of PROPS) {\n  definitions[prop] = {\n    get() {\n      if (prop === 'database') {\n        // in rare cases, the microtask may not be flushed yet, so we need to instantiate the DB\n        // now if the user is asking for it\n        this._dbCreate();\n      }\n      return this._ctx[prop];\n    },\n    set(val) {\n      if (prop === 'database') {\n        throw new Error('database is read-only');\n      }\n      this._set(prop, val);\n    }\n  };\n}\nObject.defineProperties(PickerElement.prototype, definitions);\n\n/* istanbul ignore else */\nif (!customElements.get('emoji-picker')) {\n  // if already defined, do nothing (e.g. same script imported twice)\n  customElements.define('emoji-picker', PickerElement);\n}\nexport { PickerElement as default };"],
  "mappings": "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",
  "names": ["set", "keyPath", "res", "emoji", "version", "_", "result", "customEmojiIndex", "results", "currentMap", "MIN_SEARCH_TEXT_LENGTH", "uniqBy", "set", "DEFAULT_DATA_SOURCE", "DEFAULT_LOCALE"]
}
